{# src/Arii/JIDBundle/Resources/views/orders.html.twig #}
{% extends "AriiJIDBundle::layout.html.twig" %}

{% block content %}
<!--[if !IE]>start section<![endif]-->	
<div class="section table_section">
	<!--[if !IE]>start title wrapper<![endif]-->
	<div class="title_wrapper">
		<h2>{{ "Orders" | trans }}</h2>
<ul  class="section_menu">
{% if arii_pro %}
    <li><a href="{{ url('arii_JID_orders_treegrid') }}" class="active"><span><span><img src="{{ asset('bundles/ariicore/images/wa/tree.png') }}"/>&nbsp;{{ "Tree" | trans }}</span></span></a></li>
{% endif %}
    <li><a href="{{ url('arii_JID_orders_grid') }}" class=""><span><span><img src="{{ asset('bundles/ariicore/images/wa/list.png') }}"/>&nbsp;{{ "List" | trans }}</span></span></a></li>
      <li><a href="{{ url('arii_JID_orders_timeline') }}" class=""><span><span><img src="{{ asset('bundles/ariicore/images/wa/timeline.png') }}"/>&nbsp;{{ "Timeline" | trans }}</span></span></a></li>
    <li><a href="{{ url('arii_JID_orders_last') }}" class=""><span><span><img src="{{ asset('bundles/ariicore/images/wa/monitor.png') }}"/>&nbsp;{{ "Monitor" | trans }}</span></span></a></li>
</ul> 
		<span class="title_wrapper_left"></span>
		<span class="title_wrapper_right"></span>
	</div>
	<!--[if !IE]>end title wrapper<![endif]-->
<!--[if !IE]>start section content<![endif]-->
	<div class="section_content">
		<!--[if !IE]>start section content top<![endif]-->
		<div class="sct">
			<div class="sct_left">
				<div class="sct_right">
					<div class="sct_left">
                                                <div class="sct_right">
    <div id="mygrid" style="height:576px;background-color:white;overflow:hidden;position:relative;"></div>
						</div>
					</div>
				</div>
			</div>
		</div>
<script language="javascript">
var autorefresh = setInterval( "GridRefresh()",30000);
var activated = false;
var steps = false;
var rowId; // Index en cours pour le refresh

menu = new dhtmlXMenuObject(null);
menu.setIconsPath( "{{ asset('bundles/ariicore/images/wa/') }}" );
menu.renderAsContextMenu();
menu.loadStruct("{{ url('xml_JID_orders_menu') }}");

var dhxLayout = new dhtmlXLayoutObject("mygrid","2E");
var toolbar = dhxLayout.attachToolbar();
toolbar.setIconsPath("{{ asset('bundles/ariicore/images/wa/') }}");
toolbar.loadStruct("{{ url('xml_JID_toolbar_orders') }}");
toolbar.attachEvent( "onClick", function(id, value) {
    switch (id) {
        case "refresh":
            GridRefresh();
        break;
    case "print":
            // mygrid.setColumnHidden(1,true);
            mygrid.printView();
            break;
    case "rss":
        document.location.href = "{{ url('rss_JID_history_orders') }}";
        break;
    case "menu":
        document.location.href = "{{ url('arii_JID_index') }}";
        break;
    case "menu_history":
        document.location.href = "{{ url('arii_JID_history') }}";
        break;
    case "menu_orders":
        document.location.href = "{{ url('arii_JID_orders') }}";
        break;
    case "menu_chains":
        document.location.href = "{{ url('arii_JID_chains') }}";
        break;
    case "menu_planned":
        document.location.href = "{{ url('arii_JID_planned') }}";
        break;
    case "menu_spoolers":
        document.location.href = "{{ url('arii_JID_spoolers') }}";
        break;
    case "menu_ha":
        document.location.href = "{{ url('arii_JID_spoolers') }}";
        break;
    case "menu_msg":
        document.location.href = "{{ url('arii_JID_messages') }}";
        break;
        default:
            alert(id);
    }
});

dhxLayout.cells("a").hideHeader();
dhxLayout.cells("a").setHeight(295);

var mygrid = dhxLayout.cells("a").attachGrid();
mygrid.selMultiRows = true;
mygrid.setImagePath( "{{ asset('bundles/ariicore/images/wa/') }}");
mygrid.setIconsPath( "{{ asset('bundles/ariicore/images/wa/') }}");
mygrid.enableTreeCellEdit(false);
mygrid.setHeader("{{ "Location" | trans }},#cspan,{{ "State" | trans }},#cspan,{{ "Status" | trans }},#cspan,#cspan,{{ "Start time" | trans }},{{ "End time" | trans }},{{ "Information" | trans }},{{ "Next start time" | trans }}");
mygrid.attachHeader("#text_filter,#cspan,#select_filter,#cspan,#select_filter,#select_filter,#cspan,#text_filter,#text_filter,#text_filter,#text_filter");
mygrid.setInitWidths("0,*,100,70,90,0,30,130,130,*,130");
mygrid.setColTypes("ro,tree,ro,ro,ro,img,ro,ro,ro,ro,ro");
mygrid.setColAlign("left,left,left,left,center,right,right,right,right,left,right");
mygrid.setColSorting("str,str,str,str,str,date,date,str,str,str,date");
mygrid.setColumnHidden(9,true);
mygrid.setColumnHidden(10,true);

//mygrid.enableTreeGridLines(false);
mygrid.enableContextMenu(menu);
mygrid.attachEvent("onBeforeContextMenu", onShowMenu);
mygrid.attachEvent("onOpenEnd",function(index, state) {
{% if arii_save_states %}
    mygrid.saveOpenStates();
{% endif %}
    dhtmlxAjax.get( "{{ url('arii_session_update') }}?state=orders:"+encodeURIComponent(index)+':'+state, function (loader) {
    });    
});
/*
var sb = dhxLayout.cells("a").attachStatusBar();
dhxLayout.cells("a").vs[dhxLayout.cells("a").av].sbHeight = 30;
sb.setText('<div id="recinfoArea"></div>');

mygrid.enablePaging(true, 20, 5, "recinfoArea");
mygrid.setPagingSkin("toolbar","dhx_skyblue");
mygrid.setPagingWTMode(true,true,true,[ 5, 10, 20, 50, 100, 200, 500, 1000, 2000]);

mygrid.setFiltrationLevel(-2);
*/
mygrid.init();
// mygrid.loadOpenStates();
mygrid.setSkin('dhx_skyblue');
mygrid.i18n.paging={
      results: "{{ "Results" | trans }}",
      records: "{{ "From" | trans }} ",
      to: " {{ "to" | trans }} ",
      page:"{{ "Page" | trans }} ",
      perpage: "{{ "rows per page" | trans }}",
      first: "{{ "To first Page" | trans }}",
      previous:"{{ "Previous Page" | trans }}",
      found:"{{ "Found records" | trans }}",
      next:"{{ "Next Page" | trans }}",
      last:"{{ "To last Page" | trans }}",
      of:" {{ "of" | trans }} ",
      notfound:"{{ "No Records Found" | trans }}" };

{% if  app.request.get('status') != '' %}
mygrid.loadXML( "{{ url('xml_JID_orders_list') }}", function() {
//    toolbar.setItemState("deploy",true);
    mygrid.getFilterElement(4).value='{{ app.request.get('status') }}';
//    mygrid.filterBy(4,"{{ app.request.get('status') }}",true);
    mygrid.expandAll();
});
{% else %}
mygrid.loadXML( "{{ url('xml_JID_orders_list') }}");
{% endif %}
mygrid.enableLightMouseNavigation( true );
mygrid.attachEvent("onRowSelect",function(id,ind){
    rowId = id;
});

mygrid.attachEvent("onRowDblClicked",function(id, value){
    if(mygrid.getUserData(id,"type")==="step_job")
    {
       dhxLayout.cells("b").progressOn();
       id = id.substr(1);
       dhxLayout.cells("b").setText("{{ "Job" | trans }}");
       tabbar.cells("b1").attachURL("{{ url('arii_JID_detail_job') }}?id="+id,true);
        dhxLayout.cells("b").expand();
        toolbar.setItemState("contract",true);
       jobloggrid.load( "{{ url('xml_JID_job_log') }}?id="+id, function () {
            tabbar.showTab("b3");
            tabbar.hideTab("b2",true);
            tabbar.hideTab("b4",true);
            dhxLayout.cells("b").progressOff();
        });
    } 
    else
    {
       if (mygrid.getUserData(id,"type")==="order") { OrderDetail(id);   }
       if (mygrid.getUserData(id,"type")==="order add")
       {     
          dhxLayout.cells("b").progressOn();
          dhxLayout.cells("b").setText("{{ "Order" | trans }}");
          tabbar.cells("b1").attachURL("{{ url('arii_JID_detail_order') }}?id="+id,true);
          // dans tous les cas on recharge le log
          hstgrid.load( "{{ url('arii_JID_grid_history_order') }}?id="+ id, function () {
            tabbar.hideTab("b3",true);
              tabbar.showTab("b4");
              loggrid.load( "{{ url('arii_JID_order_log') }}?id="+ id, function () {
              tabbar.showTab("b2");
              // tabbar.cells("b5").attachURL("{{ url('arii_JID_process_graphviz') }}?order_id="+id,true);
              dhxLayout.cells("b").expand();
              toolbar.setItemState("contract",true);
              dhxLayout.cells("b").progressOff();
            });
          });
       }
       else if (mygrid.getUserData(id,"type")==="order planned") {
          dhxLayout.cells("b").progressOn();
          dhxLayout.cells("b").setText("{{ "Order" | trans }}");
          tabbar.cells("b1").attachURL("{{ url('arii_JID_detail_order_plan') }}?id="+id.substr(2),true);
          // dans tous les cas on recharge le log
          tabbar.hideTab("b2",true);
          tabbar.hideTab("b3",true);
          tabbar.hideTab("b4",true);
              dhxLayout.cells("b").expand();
              toolbar.setItemState("contract",true);
              dhxLayout.cells("b").progressOff();
       }
       else if(mygrid.getUserData(id,"type")==="planned")
       {
           alert("Stored:"+id);
       }       
       else {
           // alert (mygrid.getUserData(id,"type"));
        }
    }
});
toolbar.attachEvent("onStateChange", function(id,state) {
    switch (id) {
/*        case 'deploy':
            if (state) {
                mygrid.expandAll();
            }
            else {
                mygrid.collapseAll();
            }
            break;
*/        case 'show_info':
            mygrid.setColumnHidden(9,!state);
            break;
        case 'show_time':
            mygrid.setColumnHidden(10,!state);
            break;
        case 'show_time':
            mygrid.setColumnHidden(10,!state);
            break;
        case 'show_time':
            mygrid.setColumnHidden(10,!state);
            break;
        case 'contract':
            if (state) {
                dhxLayout.cells("b").expand();
                mygrid.enablePaging(true, 10, 5, "recinfoArea"); 
            }
            else {
                dhxLayout.cells("b").collapse();
                mygrid.enablePaging(true, 20, 5, "recinfoArea"); 
             }
             GridRefresh();
            break;
        case 'activated':
            activated = state;
            GridRefresh();
            break;
        case 'steps':
            steps = state;
            GridRefresh();
        default:
            break;
    }
});
 
var tabbar = dhxLayout.cells("b").attachTabbar();
// tabbar.setImagePath("{{asset("arii/dhtmlx/dhtmlxTabbar/codebase/imgs/")}}");
tabbar.setSkin("dhx_skyblue");
tabbar.addTab("b1","{{ "Information" | trans }}","150px",null,true);
tabbar.addTab("b2","{{ "Log" | trans }}","150px");
tabbar.addTab("b3","{{ "Job log" | trans }}","150px");
tabbar.addTab("b4","{{ "History" | trans }}","150px");
// tabbar.addTab("b5","{{ "Graph" | trans }}","150px");
// tabbar.setTabActive("b1");

// tabbar.cells("b1").attachURL("{{ url('arii_JID_detail_job') }}",true);

var loggrid = tabbar.cells("b2").attachGrid();
loggrid.setHeader("{{ "Date" | trans }},{{ "Task" | trans }},{{ "Message" | trans }},{{ "Code" | trans }}");
loggrid.attachHeader("#text_filter,#select_filter,#text_filter,#select_filter");
loggrid.setInitWidths("160,250,*,60");
loggrid.setColAlign("right,left,left,right");
loggrid.setColTypes("ro,ro,ro,ro");
loggrid.setColSorting("date,str,str,int");
loggrid.init();
loggrid.setSkin('dhx_skyblue');

var jobloggrid = tabbar.cells("b3").attachGrid();
jobloggrid.setHeader("{{ "Date" | trans }},{{ "Type" | trans }},{{ "Message" | trans }},{{ "Code" | trans }}");
jobloggrid.attachHeader("#text_filter,#select_filter,#text_filter,#select_filter");
jobloggrid.setInitWidths("160,40,*,60");
jobloggrid.setColAlign("right,left,left,right");
jobloggrid.setColTypes("ro,ro,ro,ro");
jobloggrid.setColSorting("date,str,str,int");
jobloggrid.init();
jobloggrid.setSkin('dhx_skyblue');
// tabbar.hideTab("b3",true);
        
var hstgrid = tabbar.cells("b4").attachGrid();
hstgrid.setHeader("{{ "State" | trans }},{{ "Step" | trans }},{{ "Start time" | trans }},{{ "End time" | trans }},{{ "Duration" | trans }},{{ "Message" | trans }}");
hstgrid.attachHeader("#select_filter,#select_filter,#text_filter,#text_filter,#text_filter,#text_filter");
hstgrid.setInitWidths("200,60,140,140,100,*");
hstgrid.setColTypes("tree,ro,ro,ro,ro,ro");
hstgrid.setColAlign("left,right,right,right,right,left");
hstgrid.setColSorting("str,int,date,date,str,str");
hstgrid.enableTreeGridLines(true);
hstgrid.enableTreeCellEdit(false);
hstgrid.init();
hstgrid.setSkin('dhx_skyblue');

dhxLayout.cells("b").collapse();

function GridRefresh() {
    var currentTime = new Date();
    var hours = currentTime.getHours();
    var minutes = currentTime.getMinutes();
    var seconds = currentTime.getSeconds();
    if (minutes < 10){
    minutes = "0" + minutes;
    }
    if (seconds < 10){
    seconds = "0" + seconds;
    }
    toolbar.setItemText( "refresh", hours + ":" + minutes + ":" +  seconds );
    var page_number = mygrid.currentPage;
    mygrid.loadXML( "{{ url('xml_JID_orders_list') }}?eric=test&time="+seconds+'&activated='+activated+'&steps='+steps, function(){
//            mygrid.loadOpenStates();
//            toolbar.setItemState("deploy",false);
        mygrid.changePage(page_number);
        mygrid.refreshFilters();
        mygrid.filterByAll();
        mygrid.selectRowById(rowId);
    });
}

function GlobalRefresh()
{
    GridRefresh();
}

var dhxWins = new dhtmlXWindows();
// dhxWins.enableAutoViewport(false);
dhxWins.attachViewportTo("wrapper");
// dhxWins.setImagePath("{{ asset('bundles/ariicore/js/dhtmlx/dhtmlxWindows/codebase/imgs/') }}");

function onShowMenu(rowId,cleInd,grid) 
{
    if(mygrid.getUserData(rowId,"type")==="folder")
    {
        return false;
    }
    var status = grid.cells(rowId,4).getValue();
    var state = grid.cells(rowId,5).getValue();
    menu.hideItem('doc');
    menu.hideItem('process');
    menu.hideItem('purge');
    menu.hideItem('show_history');
    menu.hideItem('check_spooler');
    menu.hideItem('terminate_spooler');
    menu.hideItem('pause_spooler');
    menu.hideItem('continue_spooler');
    menu.hideItem("start_order");
    menu.hideItem("modify_order");
    menu.hideItem("add_order");
    menu.hideItem("remove_setback");
    menu.hideItem("reset_order");
    menu.hideItem("resume_order");
    menu.hideItem("show_history");
    menu.hideItem("skip");
    menu.hideItem("start_order");
    menu.hideItem("stop");
    menu.hideItem("stop_chain");
    menu.hideItem("suspend_order");
    menu.hideItem("order_detail");
    menu.hideItem("order_log");
    menu.hideItem("unskip");
    menu.hideItem("unstop");
    menu.hideItem("unstop_chain");    
    menu.hideItem("unstop_job");    
    menu.hideItem("job_detail");
    menu.hideItem("job_log");
    // menu.hideItem("sep1");    
    menu.hideItem("doc");
    menu.hideItem("process");   
    if (mygrid.getUserData(rowId,"type")==="spooler")
    {
        menu.showItem('check_spooler');
        {% if is_granted('ROLE_OPERATOR') %}
        menu.showItem('terminate_spooler');
        if (status ==='RUNNING') {
            menu.showItem('pause_spooler');    
        }
        else {
            menu.showItem('continue_spooler');    
        }
        {% endif %}
        return true;
    }
    if(mygrid.getUserData(rowId,"type")==="step_job" || mygrid.getUserData(rowId,"type")==="action_step")
    {
        menu.showItem("doc");    
        menu.showItem("job_log");    
        menu.showItem("job_detail");    
        {% if is_granted('ROLE_OPERATOR') %}
        menu.showItem("sep1");    
        // Etat du traitement
        if(state === "SKIP")
        {
            menu.showItem("unskip");
            menu.showItem("stop");
        }
        else if(state === "STOP")
        {
            menu.showItem("unstop");
            menu.showItem("skip");
        }
        else if(state === "STOP")
        {
            menu.showItem("unstop");
            menu.showItem("skip");
        }
        else {
            menu.showItem("stop");
            menu.showItem("skip");
        }
        
        // statut du job
        if (status === "JOB STOP!") {
            menu.showItem("unstop_job");
        }
        else if (status === "SKIPPED") {
            menu.showItem("unskip");
        }
 
        {% endif %}
        return true;
    }
    if (mygrid.getUserData(rowId,"type").substr(0,5)==="order")
    {
        // pas de start pour un ordre dynamique
        menu.showItem("doc");
        menu.showItem("order_log");    
        menu.showItem("order_detail");    
        if (mygrid.getUserData(rowId,"type")==="order add") {
        }
        {% if is_granted('ROLE_OPERATOR') %}            
        else {
             menu.showItem("modify_order");
             menu.showItem("suspend_order");
             menu.showItem("sep1");     
        }
        {% endif %}
        if (mygrid.getUserData(rowId,"type")!=="order planned") {
        {% if is_granted('ROLE_OPERATOR') %}
            menu.showItem("purge");
        {% endif %}
            menu.showItem("process");
            menu.showItem("show_history");
        }
        menu.setItemEnabled("stop");
        if (status === "SUSPENDED")
        {
           menu.hideItem("suspend_order");
           {% if is_granted('ROLE_OPERATOR') %}
           menu.showItem("resume_order");
           menu.showItem("reset_order");
           {% endif %}
        } 
        else if (status === "SETBACK") {
        {% if is_granted('ROLE_OPERATOR') %}
           menu.showItem("suspend_order");
           menu.showItem("remove_setback");
           menu.showItem("reset_order");
        {% endif %}
           menu.hideItem("start_order");
        }
        else {
            menu.hideItem("resume_order");
            menu.hideItem("reset_order");
        }
        return true;
    }
    if((mygrid.getUserData(rowId,"type")==="job_chain")
        || (mygrid.getUserData(rowId,"type")==="nested_job_chain"))
    {
        menu.showItem("doc");
        {% if is_granted('ROLE_OPERATOR') %}
        menu.showItem("sep1");    
        menu.showItem("add_order");
        if (status === "ACTIVE")
        {
            menu.hideItem("unstop_chain");
            menu.showItem("stop_chain");
        } else if (status === "STOPPED"){
            menu.showItem("unstop_chain");
            menu.hideItem("stop_chain");
        }
        {% endif %}
        return true;
    }
    // for the action_step job, the row ID is spooler_id/job_chain/state, then in the soscontroller, we can't use the same stop unstop skip unskip case,
    // we need a new case to deal with this, the new case will request to the scheduler_job_chain_nodes where concat(SPOOLER_ID,JOB_CHAIN,ORDER_STATE)=id
    // i do a test, if it's not ok, delete it then
    return false;
}
</script>
		<!--[if !IE]>end section content top<![endif]-->
		<!--[if !IE]>start section content bottom<![endif]-->
		<span class="scb"><span class="scb_left"></span><span class="scb_right"></span></span>
		<!--[if !IE]>end section content bottom<![endif]-->
		
	</div>
	<!--[if !IE]>end section content<![endif]-->
</div>
{% include "AriiJIDBundle:_Global:menu.html.twig" %}
<!--[if !IE]>end section<![endif]-->
{% endblock %}
{% block calendar %}      
    {{ render(controller("AriiJIDBundle:Sidebar:calendar", { 'mode': 'Past'} )) }}
{% endblock %}