<script type="text/javascript">
/* Gestion du menu contextuel */
function onButtonClick(menuitemId, type) {
    var data = mygrid.contextID.split("_");
    //rowInd_colInd;
    var rId = data[0];
    var cInd = data[1];
//     mygrid.setRowTextStyle(data[0], "color:" + menuitemId.split("_")[1]);
    // alert("rId "+rId+" cInd "+cInd);
    spooler = mygrid.cells(rId,0).getValue();
    switch (menuitemId) {
       case "spooler_go":
           window.open('/js/'+spooler+'/', spooler);
            break;
       case "show_info":
            JobInfo( rId );
        break;
        case "doc":
            window.open('{{ url('arii_JID_job_doc') }}?id='+rId,'arii_doc');
            break;
       case "job_history":
            document.location.href = "{{ url('arii_JID_history_job') }}?id="+rId;
        break;
       case "order_history":
            document.location.href = "{{ url('arii_JID_order_history') }}?id="+rId;
        break;
        case "start_task":
            Job(    "start_job", rId,
                    "{{ "Start job" | trans }}",
                    "{{ url('xml_JID_job_toolbar_start') }}",
                    true );
            break;
        case "stop_job":
            Job(    "stop_job", rId,
                    "{{ "Stop job" | trans }}",
                    "{{ url('xml_JID_job_toolbar_stop') }}",
                    false );
            break;
        case "unstop_job":
            Job(    "unstop_job", rId,
                    "{{ "Unstop job" | trans }}",
                    "{{ url('xml_JID_job_toolbar_unstop') }}",
                    false );
            break;
        case "kill_task":
            Job(    "kill_task", rId,
                    "{{ "Kill task" | trans }}",
                    "{{ url('xml_JID_job_toolbar_kill_task') }}",
                    false );
            break;
        case "delete_task":
            Job(    "delete_task", rId,
                    "{{ "Delete task" | trans }}",
                    "{{ url('xml_JID_job_toolbar_delete_task') }}",
                    false );
            break;
        case "modify_order":
            Order(    "modify_order", rId,
                    "{{ "Order" | trans }} "+rId,
                    "{{ url('xml_JID_order_toolbar_start') }}",
                    false );
            break;
        case "add_order":
            Order(    "add_order", rId,
                    "{{ "New order" | trans }}",
                    "{{ url('xml_JID_order_toolbar_start') }}",
                    false );
            break;
        case "show_why":
            ShowWhy( rId);
            break;
        case "pause_spooler":
            Spooler("{{ url('arii_XML_Command') }}?command=pause_spooler&spooler_id",spooler);
            break;
        case "continue_spooler":
            Spooler("{{ url('arii_XML_Command') }}?command=continue_spooler&spooler_id",spooler);
            break;
        case "check_spooler":
            // Spooler("{{ url('arii_JID_spooler_update') }}?id",spooler);
            CheckSpooler(spooler)
            break;
        case "terminate_spooler":
            Spooler("{{ url('arii_XML_Command') }}?command=restart_spooler&spooler_id",spooler);
            break;
        case "abort_spooler":
            Spooler("{{ url('arii_XML_Command') }}?command=abort_spooler&spooler_id",spooler);
            break;
        case "purge_job":
            PurgeJob( rId );
        break;
        case "job_detail":
            JobDetail( rId );
        break;
        case "order_detail":
            OrderDetail( rId );
        break;
        case "stop_chain":
            Chain(rId,menuitemId,"{{ "Stop chain" | trans }}",null);
            break;
        case "unstop_chain":
            Chain(rId,menuitemId,"{{ "Unstop chain" | trans }}",null);
            break;
        case "stop_node":
            nId = mygrid.getUserData(rId,'TASK_ID');
            Node(rId,nId,menuitemId,"{{ "Stop node" | trans }}",null);
            break;
        case "unstop_node":
            nId = mygrid.getUserData(rId,'TASK_ID');
            Node(rId,nId,menuitemId,"{{ "Unstop node" | trans }}",null);
            break;
        case "skip_node":
            nId = mygrid.getUserData(rId,'TASK_ID');
            Node(rId,nId,menuitemId,"{{ "Skip node" | trans }}",null);
            break;
        case "unskip_node":
            nId = mygrid.getUserData(rId,'TASK_ID');
            Node(rId,nId,menuitemId,"{{ "Unskip node" | trans }}",null);
            break;            
        case "suspend_order":
        case "resume_order":
                alert(menuitemId);
            break;
        case "reset_order":
            XMLCommand(rId,menuitemId);
            break;
        default:
            alert("inconnu ! "+menuitemId);    
    }
    return true;
}
menu.attachEvent("onClick", onButtonClick);

function Chain(id,command,message,chain)
{
    dhtmlx.message({
        type: "Notice",
        text: message
    });
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command="+command+"&id="+id+"&chain="+chain,function(loader){
        dhtmlx.message({
        type: "Notice",
        expire: 10000,
        width: "500px",
        text: loader.xmlDoc.responseText
        });
        GridRefresh();
    });
}

function Node(id,nid,command,message,chain)
{
    dhtmlx.message({
        type: "Notice",
        text: message
    });
    alert("{{ url('arii_XML_Command') }}?command="+command+"&node_id="+nid+"&id="+id);
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command="+command+"&node_id="+nid+"&id="+id+"&chain="+chain,function(loader){
        dhtmlx.message({
        type: "Notice",
        expire: 10000,
        width: "500px",
        text: loader.xmlDoc.responseText
        });
        GridRefresh();
    });
}

var dhxCalendar;
var msg;

function Job( Command, id, Text, Toolbar, Time ) { 
    var largeur = 600;
        msg = dhxWins.createWindow( "msgwin" , (document.getElementById("wrapper").offsetWidth-largeur)/2, 50, largeur, 500 );
        msg.setText(Text+' '+id);
    var winLayout;
    winLayout = msg.attachLayout("1C");
    winLayout.cells("a").hideHeader();
    winLayout.cells("a").setHeight(300);

    var winbar = winLayout.cells("a").attachTabbar();
    // tabbar.setImagePath("{{asset("arii/dhtmlx/dhtmlxTabbar/codebase/imgs/")}}");
    winbar.setSkin("dhx_skyblue");
    winbar.addTab("b1","{{ "Detail" | trans }}","100px", null, true);
    winbar.addTab("b2","{{ "Parameters" | trans }}","100px");

    winbar.cells("b1").attachURL("{{ url('arii_JID_detail_job') }}?id="+id,true);
    
    var toolbar = winLayout.cells("a").attachToolbar();
    toolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    toolbar.loadStruct( Toolbar, function(){
        if (Time) {
            GBCalendar = new dhtmlXCalendarObject(toolbar.getInput('ref_date'));
            GBCalendar.setDateFormat("%Y-%m-%d %H:%i:%s");
            GBCalendar.setWeekStartDay(1);
        }
    });
    
    var toolbar2 = winbar.cells("b2").attachToolbar();
    toolbar2.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    toolbar2.loadStruct("{{ url('xml_JID_job_toolbar_params') }}");

    var dhxgrid = winbar.cells("b2").attachGrid();
    dhxgrid.selMultiRows = true;
    dhxgrid.setHeader("{{ "Name" | trans }},{{ "Value" | trans }}");
    dhxgrid.setColTypes("ed,ed");
    dhxgrid.setInitWidths("*,*");
    dhxgrid.init();
    dhxgrid.loadXML("{{ url('xml_JID_start_job_parameters') }}?id="+id);

    toolbar.attachEvent("onClick",function(itemid){
        switch(itemid) {
            case "start_job":
            case "stop_job":
            case "unstop_job":
            case "delete_task":
            case "kill_task":
                var params = new Array();
                dhxgrid.forEachRow(function(id){
                    var param = dhxgrid.cells(id,0).getValue() + "=" + encodeURIComponent(dhxgrid.cells(id,1).getValue());
                    params.push(param);
                });
                var paramsStr = params.join(",");
                var start_time = '';
                if (Time)
                    start_time = toolbar.getValue("ref_date");
                dhtmlx.message({
                type: "Notice",
                text: Text+" <strong>"+id+"</strong>" });
                // alert("{{ url('arii_XML_Command') }}?command="+Command+"&params="+encodeURIComponent(params)+"&time="+start_time+"&job_id="+id); 
                dhxLayout.cells("a").progressOn();
                dhtmlxAjax.post("{{ url('arii_XML_Command') }}","command="+Command+"&params="+encodeURIComponent(params)+"&time="+start_time+"&job_id="+id,function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                    GridRefresh();
                    dhxLayout.cells("a").progressOff();
                    msg.close();                    
                });
                break;
            case "cancel":
                msg.close();
                break;
            default:
                alert(itemid);
                break;
        }
        return true;
    });
    
    toolbar2.attachEvent("onClick",function(itemid){
        switch(itemid) {
            case "new":
                dhxgrid.addRow(dhxgrid.getRowsNum()+1,"");
                break;
            default:
                break;
        }
        return true;
    });

return true;
}

function ShowWhy( id ) { 
    largeur = 900;
    msg = dhxWins.createWindow( "msgwin" ,  (document.getElementById("wrapper").offsetWidth-largeur)/2, 50, largeur, 550 );
    msg.setText("{{ "Diagnostic" | trans }} ");

    winLayout = msg.attachLayout("1C");
    winLayout.cells("a").hideHeader();
    winLayout.cells("a").progressOn();
    
    toolbar = winLayout.cells("a").attachToolbar();
    toolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    toolbar.loadStruct("{{ url('arii_JID_toolbar_job_why') }}");
    toolbar.attachEvent("onClick",function(buttonId){
        switch (buttonId) {
            case "cancel":
                msg.close();
                break;
            default:
                alert(buttonId);
        }
        return true;
    });

    var dhxgrid = winLayout.cells("a").attachGrid();
    dhxgrid.setHeader("{{ "Name" | trans }},{{ "Value" | trans }}");
    dhxgrid.setColTypes("tree,ro");
    dhxgrid.enableTreeGridLines(true);
    dhxgrid.setInitWidths("400,*");
    dhxgrid.init();
    dhxgrid.load("{{ url('arii_XML_Command') }}?command=why_job&job_id="+id, function () {
        winLayout.cells("a").progressOff();    
    });
}


function PurgeJob( id ) { 
    var largeur = 600;
        msg = dhxWins.createWindow( "msgwin" ,  (document.getElementById("wrapper").offsetWidth-largeur)/2, 200, largeur, 400 );
        msg.setText("{{ "Purge job" | trans }} "+id);

    var winLayout;
    winLayout = msg.attachLayout("1C");
    winLayout.cells("a").hideHeader();
    winLayout.cells("a").attachURL("{{ url('arii_JID_detail_job') }}?id="+id,true);

    var toolbar;
    toolbar = winLayout.cells("a").attachToolbar();
    toolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    toolbar.loadStruct("{{ url('arii_JID_toolbar_purge_job') }}");

    toolbar.attachEvent("onClick",function(itemid){
        switch (itemid) {
            case "stop":
                msg.progressOn();
                dhtmlx.message({
                type: "Notice",
                text: "{{ "Purge job" | trans }} <strong>"+id+"</strong>" });
                msg.close();
                dhtmlxAjax.post("{{ url('arii_JID_history_purge') }}","job_id="+id,function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                    GridRefresh();
                });
                break;
            case "cancel":
                msg.close();
                break;
            default: 
                break;
        }
        return true;
    });
    
return true;
}

function Order( Command, id, Text, Toolbar, Time, chain )
{
    var largeur = 640;
        msg = dhxWins.createWindow( "msgwin" ,  (document.getElementById("wrapper").offsetWidth-largeur)/2, 50, largeur, 400 );
        msg.setText(Text);
        
    var winLayout;
    winLayout = msg.attachLayout("1C");
    winLayout.cells("a").hideHeader();
 
    var winbar = winLayout.cells("a").attachTabbar();
    // tabbar.setImagePath("{{asset("arii/dhtmlx/dhtmlxTabbar/codebase/imgs/")}}");
    winbar.setSkin("dhx_skyblue");
    winbar.addTab("b1","{{ "Detail" | trans }}","100px", null, true);
    winbar.addTab("b2","{{ "Parameters" | trans }}","100px");
   
    var toolbar;
    toolbar = winLayout.cells('a').attachToolbar();
    toolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");

    toolbar.loadStruct(Toolbar,function(){
        if (Time) {
            GBCalendar = new dhtmlXCalendarObject(toolbar.getInput('ref_date'));
            GBCalendar.setDateFormat("%Y-%m-%d %H:%i:%s");
            GBCalendar.setWeekStartDay(1);
        }
    });

    var toolbar2;
    toolbar2 = winbar.cells("b2").attachToolbar();
    toolbar2.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    toolbar2.loadStruct("{{ url('xml_JID_order_toolbar_params') }}");

    var dhxgrid = winbar.cells("b2").attachGrid();
    dhxgrid.selMultiRows = true;
    dhxgrid.setHeader("{{ "Name" | trans }},{{ "Value" | trans }}");
    dhxgrid.setColTypes("ed,ed");
    dhxgrid.setInitWidths("*,*");
    dhxgrid.init();

    dhxForm = winbar.cells("b1").attachForm();
    winbar.cells("b1").progressOn();
    // alert("{{ url('json_JID_order_form') }}?id="+id);
    dhxForm.loadStruct("{{ url('json_JID_order_form') }}?id="+id, function(){
        winbar.cells("b1").progressOff();    
        dhxgrid.loadXML("{{ url('xml_JID_order_params') }}?id="+id);
    });
    
    toolbar.attachEvent("onClick",function(itemid){
        switch(itemid) {
            case "new":
                dhxgrid.addRow(dhxgrid.getRowsNum()+1,"");
                break;
            case "execute":
                var params = new Array();
                dhxgrid.forEachRow(function(id){
                    var param = dhxgrid.cells(id,0).getValue() + "=" + encodeURIComponent(dhxgrid.cells(id,1).getValue());
                    params.push(param);
                });
                var paramsStr = params.join(",");
                var start_time = '';
                if (Time)
                    start_time = toolbar.getValue("ref_date");
                dhtmlx.message({
                    type: "Notice",
                    text: Text 
                });
                winLayout.cells("a").progressOn();
                dhxForm.send("{{ url('arii_XML_Command') }}?command="+Command+"&chain="+chain+"&id="+id+"&paramsStr="+encodeURIComponent(paramsStr),"POST",function(loader,response){
                    dhtmlx.message({
                        type: "Notice",
                        expire: 10000,
                        width: "500px",
                        text: loader.xmlDoc.responseText
                    });
                    GridRefresh();
                    winLayout.cells("a").progressOff();
                    msg.close();
                });               
                break;
            case "cancel":
                msg.close();
                break;
            default:
                alert(itemid);
                break;
        }
        return true;
    });

    toolbar2.attachEvent("onClick",function(itemid){
        switch(itemid) {
            case "new":
                dhxgrid.addRow(dhxgrid.getRowsNum()+1,"");
                break;
            default:
                break;
        }
        return true;
    });

    dhtmlXCalendarObject.prototype.langData["fr"] = {
            monthesFNames: ["Janvier","Février","Маrs","Аvril","Маi","Juin","Juillet","Аoût","Septembre","Оctobre","Novembre","Décembre"],
            monthesSNames: ["Jan.","Fév.","Маrs","Аvr","Маi","Juin","Jui.","Août","Sep.","Оct.","Nov.","Déc."],
            daysFNames: ["Dimanche","Lundi","Mardi","Mercredi","Jeudi","Vendredi","Samedi"],
            daysSNames: ["Di","Lu","Ma","Me","Je","Ve","Sa"],
            weekstart: 1
    };
    dhxCalendar = new dhtmlXCalendarObject(dhxForm.getInput("at"));
    dhxCalendar.loadUserLanguage("fr");
    dhxCalendar.setDateFormat("%Y-%m-%d %H:%i:%s");
    dhxCalendar.showTime();
      
    return true;
    
}

function ViewOrder( Command, id, Text, Toolbar, Time ) {
var largeur = 600;

    msg = dhxWins.createWindow( "msgwin" ,  (document.getElementById("wrapper").offsetWidth-largeur)/2, 50, largeur, 500 );
    msg.setText(Text+' '+id);
        
    var winLayout;
    winLayout = msg.attachLayout("1C");
    winLayout.cells("a").hideHeader();
    winLayout.cells("a").setHeight(300);

     var winbar = winLayout.cells("a").attachTabbar();
    // tabbar.setImagePath("{{asset("arii/dhtmlx/dhtmlxTabbar/codebase/imgs/")}}");
    winbar.setSkin("dhx_skyblue");
    winbar.addTab("b1","{{ "Detail" | trans }}","100px", null, true);
    winbar.addTab("b2","{{ "Parameters" | trans }}","100px");
    winbar.cells("b1").attachURL("{{ url('arii_JID_detail_order') }}?id="+encodeURIComponent(id),true);
     
    var toolbar = winLayout.cells("a").attachToolbar();
    toolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    toolbar.loadStruct(Toolbar ,function(){
        GBCalendar = new dhtmlXCalendarObject(toolbar.getInput('ref_date'));
        GBCalendar.setDateFormat("%Y-%m-%d %H:%i:%s");
        GBCalendar.setWeekStartDay(1);
    });

    var toolbar2;
    toolbar2 = winbar.cells("b2").attachToolbar();
    toolbar2.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    toolbar2.loadXML("{{ url('xml_JID_toolbar_order_param') }}");

    toolbar.attachEvent("onClick",function(itemid){
        switch(itemid) {
            case "modify_job":
                msg.progressOn();
                var params = new Array();
                dhxgrid.forEachRow(function(id){
                    var param = dhxgrid.cells(id,0).getValue() + "=" + encodeURIComponent(dhxgrid.cells(id,1).getValue());
                    params.push(param);
                });
                var paramsStr = params.join(",");
                var start_time = '';
                if (Time)
                    start_time = toolbar.getValue("ref_date");
                dhtmlx.message({
                type: "Notice",
                text: "{{ "Start order" | trans }} <strong>"+id+"</strong>" });
                
                winLayout.cells("a").progressOn();
                dhtmlxAjax.post("{{ url('arii_XML_Command') }}","command=start_order&params="+encodeURIComponent(params)+"&time="+start_time+"&plan=yes&order_id="+encodeURIComponent(id),function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                    GridRefresh();
                    winLayout.cells("a").progressOff();
                    msg.close();
                });
                break;
            case "cancel":
                msg.close();
                break;
            default:
                break;
        }
        return true;
    });

    var dhxgrid = winbar.cells("b2").attachGrid();
    dhxgrid.selMultiRows = true;
    dhxgrid.setHeader("{{ "Name" | trans }},{{ "Value" | trans }}");
    dhxgrid.setColTypes("ed,ed");
    dhxgrid.setInitWidths("*,*");
    dhxgrid.init();
    dhxgrid.loadXML("{{ url('xml_JID_start_order_parameters') }}?id="+encodeURIComponent(id));
    
    toolbar.attachEvent("onClick",function(itemid){
        switch(itemid) {
            case "new":
                dhxgrid.addRow(dhxgrid.getRowsNum()+1,"");
                break;
            default:
                break;
        }
        return true;
    });

    return true;          
}

// Fonctions
function CheckSpooler(rid) 
{
    dhxLayout.cells("a").progressOn();
    dhtmlxAjax.get("{{ url('arii_JID_spooler_update') }}?id="+rid,function(loader,response){
        dhxLayout.cells("a").progressOff();
        dhtmlx.message({
            type: "Notice",
            expire: 10000,
            width: "500px",
            text: loader.xmlDoc.responseText
        });
    });
return true;
}

function Spooler(url,rid)
{
    dhxLayout.cells("a").progressOn();
    dhtmlxAjax.get(url+"="+rid,function(loader,response){
        dhxLayout.cells("a").progressOff();
        dhtmlx.message({
            type: "Notice",
            expire: 10000,
            width: "500px",
            text: loader.xmlDoc.responseText
        });
        CheckSpooler(rid);
    });
    return true;
}

function XMLCommand(id,Command) 
{
    alert("command");
    dhtmlx.message({
    type: "Notice",
    text: "{{ "Execution" | trans }} <strong>"+id+"</strong>" });
    dhxLayout.cells("a").progressOn();
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command="+Command+"&id="+id,function(loader,response){
        dhtmlx.message({
            type: "Notice",
            expire: 10000,
            width: "500px",
            text: loader.xmlDoc.responseText
        });
        GridRefresh();
        dhxLayout.cells("a").progressOff();
        msg.close();
    });               
}
</script>