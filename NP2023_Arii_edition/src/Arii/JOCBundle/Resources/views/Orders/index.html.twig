{# src/Arii/JOCBundle/Resources/views/Default/history.html.twig #}
{% extends "AriiJOCBundle::layout.html.twig" %}
{% block body %}
<!--[if !IE]>end section<![endif]-->
<script language="javascript">
var only_warning = 0; // que les problemes
var chained = 0;
var update=30;
var autorefresh;
var status;

dhtmlxEvent(window,"load",function(){ 
    
    menu = new dhtmlXMenuObject(null);
    menu.setIconsPath( "{{ asset('bundles/ariicore/images/wa/') }}" );
    menu.renderAsContextMenu();
    menu.loadStruct("{{ url('xml_JOC_orders_menu') }}");

    globalLayout = new dhtmlXLayoutObject(document.body,"3L");
    globalLayout.cells("a").setWidth(315); 
    
    globalMenu = globalLayout.cells("a").attachMenu();
    globalMenu.setIconsPath( "{{ asset('/bundles/ariicore/images/menu/') }}" );
    globalMenu.loadStruct("{{ url('xml_menu') }}?route={{ app.request.attributes.get('_route') }}");

    myRibbon = globalLayout.cells("a").attachRibbon(); 
    myRibbon.setIconPath( "{{ asset('bundles/ariicore/images/ribbon/') }}" );
    myRibbon.loadStruct("{{ url('json_JOC_ribbon') }}");
    myRibbon.attachEvent("onStateChange", StateRibbon );
    myRibbon.attachEvent("onClick", ClickRibbon );

    myAccordion = globalLayout.cells("a").attachAccordion();
    myAccordion.addItem("status", "{{ "Status" | trans }}");
    myAccordion.addItem("folders", "{{ "Folders" | trans }}");

    myDonut =  myAccordion.cells('status').attachChart({
        view:"donut",
        container:"pie_chart_container",
        value:"#JOBS#",
        label:"",
        tooltip: "#STATUS#",
        color: "#COLOR#",
        border:false,
        pieInnerText: "#JOBS#",
        shadow: 0,
        legend:{
            width: 0,
            template: "#STATUS#",
            valign:"top",
            align:"left"
        }
    });
    myDonut.load( "{{ url('xml_JOC_orders_pie') }}" );
    myDonut.attachEvent("onItemClick",function(id, value){
       status = id;
        myGrid.filterBy(5, status); 
    });

    var myGridToolbar = globalLayout.cells("b").attachToolbar();
    myGridToolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    myGridToolbar.loadStruct("{{ url('xml_JOC_orders_toolbar') }}");

    myGridToolbar.attachEvent( "onClick", function(id, value) {
        switch (id) {
            case "refresh":
                globalLayout.cells("b").progressOn();
                update = value;
   //             dhtmlxAjax.get("{{ url('arii_global_toolbar_update') }}?"+id+"="+value,function(loader){
                    GridRefresh();
   //             });
                break;
            default:
                alert(id);
        }
    });
    myGridToolbar.attachEvent("onStateChange",function(id,state){
        switch (id) {
            case 'show_spooler':
                myGrid.setColumnHidden(0,!state);  
                break;
            case 'comment':
                myGrid.setColumnHidden(4,!state);  
                break;
            case 'show_time':
                myGrid.setColumnHidden(7,!state);  
                break;
            case 'show_info':
                myGrid.setColumnHidden(8,!state);  
                break;
            default:
                alert(id);
        }
    });
    globalLayout.cells("a").hideHeader();
    globalLayout.cells("b").hideHeader();
    globalLayout.cells("c").setHeight(300);

    myGrid = globalLayout.cells("b").attachGrid();
    myGrid.setImagePath( "{{ asset('bundles/ariicore/images/treegrid/') }}");
    myGrid.setHeader("{{ "Spooler" | trans }},{{ "Chain" | trans }},{{ "Order" | trans }},{{ "State" | trans }},{{ "Output" | trans }},{{ "Status" | trans }},{{ "Start time" | trans }},{{ "Next start" | trans }},{{ "Title" | trans }}");
    myGrid.attachHeader("#select_filter,#text_filter,#text_filter,#text_filter,#text_filter,#select_filter,#text_filter,#text_filter,#text_filter");
    myGrid.setInitWidths("100,*,200,100,150,100,150,150,200");
    myGrid.setColAlign("left,left,left,left,left,left,left,left,left");
    myGrid.setColTypes("ro,ro,ro,ro,ro,ro,ro,ro,ro");
    myGrid.enableContextMenu(menu);
    myGrid.enableAlterCss("","");
    myGrid.enableSmartRendering(true,50);
    myGrid.init();
    myGrid.loadXML( "{{ url('xml_JOC_orders_grid') }}?chained="+chained+"&only_warning="+only_warning );
    myGrid.setColumnHidden(0,true); 
    myGrid.setColumnHidden(4,true); 
    myGrid.setColumnHidden(7,true); 
    myGrid.setColumnHidden(8,true); 
    
    myTabbar = globalLayout.cells("c").attachTabbar();
    myTabbar.addTab("order","{{ "Order" | trans }}","120px", null, true);
    myTabbar.addTab("execution","{{ "Execution" | trans }}","120px");
    myTabbar.addTab("schema","{{ "Schema" | trans }}","120px");
/*  myTabbar.addTab("spooler","{{ "Spooler" | trans }}","120px");
    myTabbar.addTab("target","{{ "Target" | trans }}","120px");
    myTabbar.addTab("locks","{{ "Locks" | trans }}","120px");
    myTabbar.addTab("runtimes","{{ "Run times" | trans }}","100px");
*/   
    myGrid.attachEvent("onRowDblClicked", OrderDetail );

    myDetailLayout = myTabbar.cells("order").attachLayout("2U");
    myDetailLayout.cells("a").hideHeader();
    myDetailLayout.cells("b").hideHeader();
    myDetailLayout.cells("a").setWidth(700);

    myForm = myDetailLayout.cells("a").attachForm();
    myForm.loadStruct("{{ url('json_JOC_orders_form') }}");

    myDetailToolbar = myDetailLayout.cells("a").attachToolbar();
    myDetailToolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    myDetailToolbar.loadStruct( "{{ url('xml_JOC_orders_form_toolbar') }}" , function(){
        GBCalendar = new dhtmlXCalendarObject(myDetailToolbar.getInput('ref_date'));
        GBCalendar.setDateFormat("%Y-%m-%d %H:%i:%s");
        GBCalendar.setWeekStartDay(1);
    });
    
    var myParametersToolbar = myDetailLayout.cells("b").attachToolbar();
    myParametersToolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    myParametersToolbar.loadStruct("{{ url('xml_JOC_job_params_toolbar') }}");

    myParameters = myDetailLayout.cells("b").attachGrid();
    myParameters.selMultiRows = true;
    myParameters.setHeader("{{ "Parameter" | trans }},{{ "Value" | trans }}");
    myParameters.setColTypes("ed,ed");
    myParameters.setInitWidths("200,*");
    myParameters.init();
    
    myExecution = myTabbar.cells("execution").attachForm();
    myExecution.loadStruct("{{ url('json_JOC_jobs_execution_form') }}");

    menu.attachEvent("onClick", function(menuitemId,type) {
        var data = myGrid.contextID.split("_");
        var rId = data[0];
        var cInd = data[1];
        switch (menuitemId) {
               case "order_view":
                    document.location.href = "{{ url('arii_JOC_order') }}?id="+rId;
                break;
            break;
            default:
                alert(menuitemId);    
        }
        return true;
    });

    myTabbar.attachEvent("onContentLoaded", function(tab){
        myTabbar.cells("schema").progressOff();
    });
    autorefresh = setInterval( "GridRefresh()",update*1000);
    
    myDetailToolbar.attachEvent("onClick",function(itemid){
        Text = '';
        var id = myForm.getItemValue('ID');
        switch(itemid) {
            case "start_order":
                Text = "{{ "Start order" | trans }}";
                break;
            case "suspend_order":
                Text = "{{ "Suspend order" | trans }}";
                break;
            case "resume_order":
                Text = "{{ "Resume order" | trans }}";
                break;
            default:
                alert(itemid);
        }
        switch(itemid) {
            case "start_order":
            case "suspend_order":
            case "resume_order":
                var params = new Array();
                myParameters.forEachRow(function(id){
                    var param = myParameters.cells(id,0).getValue() + "=" + encodeURIComponent(myParameters.cells(id,1).getValue());
                    params.push(param);
                });
                var paramsStr = params.join(",");
                var start_time = '';
                start_time = myDetailToolbar.getValue("ref_date");
                // alert("{{ url('arii_JOC_command') }}?command="+itemid+"&params="+encodeURIComponent(params)+"&time="+start_time+"&id="+id); 
                dhtmlx.message({
                type: "Notice",
                text: Text });
                globalLayout.cells("b").progressOn();        
                dhx4.ajax.post("{{ url('arii_JOC_command') }}","command="+itemid+"&params="+encodeURIComponent(params)+"&time="+start_time+"&id="+id,function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                    globalLayout.cells("b").progressOff();        
                    globalLayout.cells("a").progressOn();        
                    // internal refresh
                    spooler_id = myForm.getItemValue('SPOOLER_ID');
                    dhx4.ajax.post("{{ url('arii_JOC_sync') }}","id="+spooler_id,function(loader,response){
                        dhtmlx.message({
                        type: "Notice",
                        expire: 10000,
                        width: "500px",
                        text: loader.xmlDoc.responseText });                  
                        globalLayout.cells("a").progressOff();        
                        GridRefresh();
                    });
                });
                break;
            default:
                alert(itemid);
                break;
        }
        return true;
    });
    
});

function OrderDetail(id) {
    clearInterval( autorefresh );
    myTabbar.cells("order").progressOn();
    myTabbar.cells("execution").progressOn();
    myTabbar.cells("schema").progressOn();
    myForm.load("{{ url('xml_JOC_order_form') }}?id="+id, function () {
        myTabbar.cells("order").progressOff();
        // mise a jour de la toolbar
        if (myForm.getItemValue("SUSPENDED")>0) {
            myDetailToolbar.hideItem('suspend_order');
            myDetailToolbar.showItem('resume_order');
        }
        else {
            myDetailToolbar.showItem('suspend_order');
            myDetailToolbar.hideItem('resume_order');
        }
        
        myExecution.load("{{ url('xml_JOC_order_form') }}?id="+id, function () {
            myTabbar.cells("execution").progressOff();
            myTabbar.cells("schema").attachURL("{{ url('svg_JOC_process_steps') }}?id="+id);
            autorefresh = setInterval( "GridRefresh()",update*1000);
        });
    });
/*
    if (status== 'SUSPENDED') {
        myDetailToolbar.hideItem('suspend_order');
    }
    else if (status== 'CHAIN STOP.') {
        myChainToolbar.hideItem('stop_chain');
    }
    else {
        myChainToolbar.hideItem('unstop_chain');
        myDetailToolbar.hideItem('resume_order');
    }
    myParameters.loadXML("{{ url('xml_JID_order_params') }}?id="+id, function() {
        mySteps.clearAndLoad("{{ url('xml_JID_order_steps') }}?id="+id, function() {
            myLog.clearAndLoad("{{ url('xml_JID_order_log') }}?id="+id, function () {
                myHistory.clearAndLoad("{{ url('xml_JID_order_history') }}?id="+id, function() {                   
                    myChainDetail.cells("b").attachURL("{{ url('svg_JID_process_steps') }}?id="+id);
                    globalLayout.cells("c").progressOff(); 
                    autorefresh = setInterval( "GridRefresh()", update*1000 );
                });  
            });                           
        });
  });
*/
}

function GridRefresh() {
    clearInterval( autorefresh );
    var currentTime = new Date();
    var hours = currentTime.getHours();
    var minutes = currentTime.getMinutes();
    var seconds = currentTime.getSeconds();
    if (minutes < 10){
    minutes = "0" + minutes;
    }
    if (seconds < 10){
    seconds = "0" + seconds;
    }
    myRibbon.setItemText( "refresh", hours + ":" + minutes + ":" +  seconds );
    myGrid.loadXML( "{{ url('xml_JOC_orders_grid') }}?chained="+chained+"&only_warning="+only_warning, function () {
        myGrid.refreshFilters();
        myGrid.filterBy(5, status);        
        myGrid.filterByAll();
        globalLayout.cells("b").progressOff();
        myDonut.load( "{{ url('xml_JOC_orders_pie') }}?chained="+chained+"&only_warning="+only_warning, function () {
            myDonut.refresh();
            globalLayout.progressOff();
            autorefresh = setInterval( "GridRefresh()", update*1000 );
        });        
    });
}

function GlobalRefresh() {
    GridRefresh();
}

function onShowMenu(rowId, celInd, grid) {
    // Cas du spooler
    if (grid.getUserData(rowId, "type" )=='spooler') {
        menu.setItemDisabled("start_task");
        menu.setItemDisabled("show_history");
        menu.setItemDisabled("stop");
        menu.setItemDisabled("unstop");
        menu.setItemDisabled("kill");
        return true;
    }
        
    var status = grid.cells(rowId, 2 ).getValue();
    menu.showItem("start_task");
    menu.showItem("stop");
    menu.showItem("show_history");
    menu.setItemDisabled("kill");
    menu.setItemDisabled("unstop");
    
    switch (status) {
    case 'SUCCESS':
        menu.setItemEnabled('show_history');
        menu.setItemEnabled('start_task');
        menu.setItemEnabled('stop');
        menu.setItemDisabled('kill');
        menu.setItemDisabled('unstop');
        break;
    case 'FAILURE':
        break;
    case 'RUNNING':
        // rien du tout, c'est instancie
        return false;
        break;
    case '':
        return false;
        break;
    case 'STOPPED':
        menu.setItemEnabled('show_history');
        menu.setItemEnabled('start_task');
        menu.setItemEnabled("unstop");
        menu.setItemDisabled("stop");
        break;
    default:
        // Cas de l'instance
        if (grid.getUserData(rowId, "jobtype" )=='instance') {
            // on ne demarre pas une tache RUNNING
            menu.setItemDisabled("start_task");
            menu.setItemEnabled("kill");
            // Un job running ne peut pas avoir d'historique
            menu.setItemDisabled("show_history");
        }
        break;
    }
    // Un job ordonné ne peut être démarré 
    if (grid.getUserData(rowId, "jobtype" )=='ordered_job') {
        menu.setItemDisabled("start_task");
    }
   
return true;
}
</script>

{% endblock %}
