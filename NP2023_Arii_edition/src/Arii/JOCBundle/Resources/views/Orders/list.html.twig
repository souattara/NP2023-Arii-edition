{# src/Arii/JIDBundle/Resources/views/orders.html.twig #}
{% extends "AriiJOCBundle::layout.html.twig" %}
{% block dhtmlx %}
	<title>Ari'i</title>
	<link rel="stylesheet" type="text/css" href="{{ asset('bundles/ariicore/dhtmlx/dhtmlx_pro_full/dhtmlx.css') }}" />
        <script src="{{ asset('bundles/ariicore/dhtmlx/dhtmlx_pro_full/dhtmlx.js') }}" type="text/javascript"></script>
        <script src="{{ asset('bundles/ariicore/dhtmlx/dhtmlxCalendar/codebase/ext/dhtmlxtimepicker.js') }}" type="text/javascript" charset="utf-8"></script>
        <link rel="stylesheet" type="text/css" href="{{ asset('bundles/ariicore/dhtmlx/dhtmlxWindows/codebase/status_toolbar_layout.css') }}" />
{% endblock dhtmlx %}
{% block content %}
<!--[if !IE]>start section<![endif]-->	
<div class="section table_section">
	<!--[if !IE]>start title wrapper<![endif]-->
	<div class="title_wrapper">
		<h2>{{ "Orders" | trans }}</h2>
<ul  class="section_menu">
      <li><a href="{{ url('arii_JOC_orders') }}" class="active"><span><span><img src="{{ asset('bundles/ariicore/images/wa/list.png') }}"/>&nbsp;{{ "List" | trans }}</span></span></a></li>
      <li><a href="{{ url('arii_JID_orders_timeline') }}" class=""><span><span><img src="{{ asset('bundles/ariicore/images/wa/timeline.png') }}"/>&nbsp;{{ "Timeline" | trans }}</span></span></a></li>
    <li><a href="{{ url('arii_JID_orders_last') }}" class=""><span><span><img src="{{ asset('bundles/ariicore/images/wa/monitor.png') }}"/>&nbsp;{{ "Monitor" | trans }}</span></span></a></li>
</ul> 
		<span class="title_wrapper_left"></span>
		<span class="title_wrapper_right"></span>
	</div>
	<!--[if !IE]>end title wrapper<![endif]-->
<!--[if !IE]>start section content<![endif]-->
	<div class="section_content">
		<!--[if !IE]>start section content top<![endif]-->
		<div class="sct">
			<div class="sct_left">
				<div class="sct_right">
					<div class="sct_left">
                                                <div class="sct_right">
    <div id="mygrid" style="height:556px;background-color:white;overflow:hidden;position:relative;"></div>
						</div>
					</div>
				</div>
			</div>
		</div>
<script language="javascript">
var autorefresh = setInterval( "GridRefresh()",30000);
var activated = false;
var steps = false;

menu = new dhtmlXMenuObject(null);
menu.setIconsPath( "{{ asset('bundles/ariicore/images/menu/') }}" );
menu.renderAsContextMenu();
menu.attachEvent("onClick", onButtonClick);
menu.loadStruct("{{ url('arii_JOC_menu_orders') }}");

var dhxLayout = new dhtmlXLayoutObject("mygrid","2E");
var toolbar = dhxLayout.attachToolbar();
toolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
toolbar.loadStruct("{{ url('xml_JID_toolbar_orders') }}");
toolbar.attachEvent( "onClick", function(id, value) {
    switch (id) {
        case "refresh":
            GridRefresh();
        break;
    case "print":
            // mygrid.setColumnHidden(1,true);
            mygrid.printView();
            break;
    case "rss":
        document.location.href = "{{ url('rss_JID_history_orders') }}";
        break;
    case "menu":
        document.location.href = "{{ url('arii_JID_index') }}";
        break;
    case "menu_history":
        document.location.href = "{{ url('arii_JID_history') }}";
        break;
    case "menu_orders":
        document.location.href = "{{ url('arii_JID_orders') }}";
        break;
    case "menu_chains":
        document.location.href = "{{ url('arii_JID_chains') }}";
        break;
    case "menu_planned":
        document.location.href = "{{ url('arii_JID_planned') }}";
        break;
    case "menu_spoolers":
        document.location.href = "{{ url('arii_JID_spoolers') }}";
        break;
    case "menu_ha":
        document.location.href = "{{ url('arii_JID_spoolers') }}";
        break;
    case "menu_msg":
        document.location.href = "{{ url('arii_JID_messages') }}";
        break;
        default:
            alert(id);
    }
});

dhxLayout.cells("a").hideHeader();
dhxLayout.cells("a").setHeight(295);

var mygrid = dhxLayout.cells("a").attachGrid();
mygrid.selMultiRows = true;
mygrid.setImagePath( "{{ asset('bundles/ariicore/images/treegrid/') }}");
mygrid.enableTreeCellEdit(false);
mygrid.setHeader("{{ "Location" | trans }},#cspan,{{ "State" | trans }},#cspan,{{ "Status" | trans }},#cspan,#cspan,{{ "Start time" | trans }},{{ "End time" | trans }},{{ "Information" | trans }},{{ "Next start time" | trans }}");
mygrid.attachHeader("#text_filter,#cspan,#select_filter,#cspan,#select_filter,#select_filter,#cspan,#text_filter,#text_filter,#text_filter,#text_filter");
mygrid.setInitWidths("*,0,100,90,90,0,30,130,130,*,130");
mygrid.setColTypes("tree,ch,ro,ro,ro,ro,ro,ro,ro,ro,ro");
mygrid.setColAlign("left,left,left,left,center,right,right,right,right,left,right");
mygrid.setColSorting("str,str,str,str,str,date,date,str,str,str,date");
mygrid.setColumnHidden(9,true);
mygrid.setColumnHidden(10,true);

//mygrid.enableTreeGridLines(false);
mygrid.enableContextMenu(menu);
mygrid.attachEvent("onBeforeContextMenu", onShowMenu);
/*
mygrid.attachEvent("onOpenEnd",function(){
    mygrid.saveOpenStates();
});
*/
var sb = dhxLayout.cells("a").attachStatusBar();
dhxLayout.cells("a").vs[dhxLayout.cells("a").av].sbHeight = 30;
sb.setText('<div id="recinfoArea"></div>');
mygrid.enablePaging(true, 20, 5, "recinfoArea");
mygrid.setPagingSkin("toolbar","dhx_skyblue");
mygrid.setPagingWTMode(true,true,true,[ 5, 10, 20, 50, 100, 200, 400, 800]);

mygrid.setFiltrationLevel(-2);
mygrid.init();
// mygrid.loadOpenStates();
mygrid.setSkin('dhx_skyblue');
mygrid.i18n.paging={
      results: "{{ "Results" | trans }}",
      records: "{{ "From" | trans }} ",
      to: " {{ "to" | trans }} ",
      page:"{{ "Page" | trans }} ",
      perpage: "{{ "rows per page" | trans }}",
      first: "{{ "To first Page" | trans }}",
      previous:"{{ "Previous Page" | trans }}",
      found:"{{ "Found records" | trans }}",
      next:"{{ "Next Page" | trans }}",
      last:"{{ "To last Page" | trans }}",
      of:" {{ "of" | trans }} ",
      notfound:"{{ "No Records Found" | trans }}" };

{% if  app.request.get('status') != '' %}
mygrid.loadXML( "{{ url('xml_JOC_orders_list') }}", function() {
//    toolbar.setItemState("deploy",true);
    mygrid.getFilterElement(4).value='{{ app.request.get('status') }}';
//    mygrid.filterBy(4,"{{ app.request.get('status') }}",true);
    mygrid.expandAll();
});
{% else %}
mygrid.loadXML( "{{ url('xml_JOC_orders_list') }}");
{% endif %}
mygrid.enableLightMouseNavigation( true );
mygrid.attachEvent("onXLE",function(){
});
mygrid.attachEvent("onRowDblClicked",function(id, value){
    if(mygrid.getUserData(id,"type")==="step_job")
    {
       dhxLayout.cells("b").progressOn();
       id = id.substr(1);
       dhxLayout.cells("b").setText("{{ "Job" | trans }}");
       tabbar.cells("b1").attachURL("{{ url('arii_JID_detail_job') }}?id="+id,true);
        dhxLayout.cells("b").expand();
        toolbar.setItemState("contract",true);
       jobloggrid.load( "{{ url('xml_JID_job_log') }}?id="+id, function () {
            tabbar.showTab("b3");
            tabbar.hideTab("b2",true);
            tabbar.hideTab("b4",true);
            dhxLayout.cells("b").progressOff();
        });
    } 
    else
    {
       if (mygrid.getUserData(id,"type")==="order")
       {     
          dhxLayout.cells("b").progressOn();
          dhxLayout.cells("b").setText("{{ "Order" | trans }}");
          tabbar.cells("b1").attachURL("{{ url('arii_JID_detail_order') }}?id="+id,true);
          // dans tous les cas on recharge le log
          hstgrid.load( "{{ url('arii_JID_grid_history_order') }}?id="+ id, function () {
            tabbar.hideTab("b3",true);
              tabbar.showTab("b4");
              loggrid.load( "{{ url('arii_JID_order_log') }}?id="+ id, function () {
              tabbar.showTab("b2");
              // tabbar.cells("b5").attachURL("{{ url('arii_JID_process_graphviz') }}?order_id="+id,true);
              dhxLayout.cells("b").expand();
              toolbar.setItemState("contract",true);
              dhxLayout.cells("b").progressOff();
            });
          });
       }
       if (mygrid.getUserData(id,"type")==="order add")
       {     
          dhxLayout.cells("b").progressOn();
          dhxLayout.cells("b").setText("{{ "Order" | trans }}");
          tabbar.cells("b1").attachURL("{{ url('arii_JID_detail_order') }}?id="+id,true);
          // dans tous les cas on recharge le log
          hstgrid.load( "{{ url('arii_JID_grid_history_order') }}?id="+ id, function () {
            tabbar.hideTab("b3",true);
              tabbar.showTab("b4");
              loggrid.load( "{{ url('arii_JID_order_log') }}?id="+ id, function () {
              tabbar.showTab("b2");
              // tabbar.cells("b5").attachURL("{{ url('arii_JID_process_graphviz') }}?order_id="+id,true);
              dhxLayout.cells("b").expand();
              toolbar.setItemState("contract",true);
              dhxLayout.cells("b").progressOff();
            });
          });
       }
       else if (mygrid.getUserData(id,"type")==="order planned") {
          dhxLayout.cells("b").progressOn();
          dhxLayout.cells("b").setText("{{ "Order" | trans }}");
          tabbar.cells("b1").attachURL("{{ url('arii_JID_detail_order_plan') }}?id="+id.substr(2),true);
          // dans tous les cas on recharge le log
          tabbar.hideTab("b2",true);
          tabbar.hideTab("b3",true);
          tabbar.hideTab("b4",true);
              dhxLayout.cells("b").expand();
              toolbar.setItemState("contract",true);
              dhxLayout.cells("b").progressOff();
       }
       else if(mygrid.getUserData(id,"type")==="planned")
       {
           alert("Stored:"+id);
       }       
       else {
           // alert (mygrid.getUserData(id,"type"));
        }
    }
});
toolbar.attachEvent("onStateChange", function(id,state) {
    switch (id) {
/*        case 'deploy':
            if (state) {
                mygrid.expandAll();
            }
            else {
                mygrid.collapseAll();
            }
            break;
*/        case 'show_info':
            mygrid.setColumnHidden(9,!state);
            break;
        case 'show_time':
            mygrid.setColumnHidden(10,!state);
            break;
        case 'show_time':
            mygrid.setColumnHidden(10,!state);
            break;
        case 'show_time':
            mygrid.setColumnHidden(10,!state);
            break;
        case 'contract':
            if (state) {
                dhxLayout.cells("b").expand();
                mygrid.enablePaging(true, 10, 5, "recinfoArea"); 
            }
            else {
                dhxLayout.cells("b").collapse();
                mygrid.enablePaging(true, 20, 5, "recinfoArea"); 
             }
             GridRefresh();
            break;
        case 'activated':
            activated = state;
            GridRefresh();
            break;
        case 'steps':
            steps = state;
            GridRefresh();
        default:
            break;
    }
});
 
var tabbar = dhxLayout.cells("b").attachTabbar();
tabbar.setImagePath("{{asset("arii/dhtmlx/dhtmlxTabbar/codebase/imgs/")}}");
tabbar.setSkin("dhx_skyblue");
tabbar.addTab("b1","{{ "Information" | trans }}","150px");
tabbar.addTab("b2","{{ "Log" | trans }}","150px");
tabbar.addTab("b3","{{ "Job log" | trans }}","150px");
tabbar.addTab("b4","{{ "History" | trans }}","150px");
// tabbar.addTab("b5","{{ "Graph" | trans }}","150px");
tabbar.setTabActive("b1");

// tabbar.cells("b1").attachURL("{{ url('arii_JID_detail_job') }}",true);

var loggrid = tabbar.cells("b2").attachGrid();
loggrid.setHeader("{{ "Date" | trans }},{{ "Task" | trans }},{{ "Message" | trans }},{{ "Code" | trans }}");
loggrid.attachHeader("#text_filter,#select_filter,#text_filter,#select_filter");
loggrid.setInitWidths("160,250,*,60");
loggrid.setColAlign("right,left,left,right");
loggrid.setColTypes("ro,ro,ro,ro");
loggrid.setColSorting("date,str,str,int");
loggrid.init();
loggrid.setSkin('dhx_skyblue');

var jobloggrid = tabbar.cells("b3").attachGrid();
jobloggrid.setHeader("{{ "Date" | trans }},{{ "Type" | trans }},{{ "Message" | trans }},{{ "Code" | trans }}");
jobloggrid.attachHeader("#text_filter,#select_filter,#text_filter,#select_filter");
jobloggrid.setInitWidths("160,40,*,60");
jobloggrid.setColAlign("right,left,left,right");
jobloggrid.setColTypes("ro,ro,ro,ro");
jobloggrid.setColSorting("date,str,str,int");
jobloggrid.init();
jobloggrid.setSkin('dhx_skyblue');
tabbar.hideTab("b3",true);
        
var hstgrid = tabbar.cells("b4").attachGrid();
hstgrid.setHeader("{{ "State" | trans }},{{ "Step" | trans }},{{ "Start time" | trans }},{{ "End time" | trans }},{{ "Duration" | trans }},{{ "Message" | trans }}");
hstgrid.attachHeader("#select_filter,#select_filter,#text_filter,#text_filter,#text_filter,#text_filter");
hstgrid.setInitWidths("200,60,140,140,100,*");
hstgrid.setColTypes("tree,ro,ro,ro,ro,ro");
hstgrid.setColAlign("left,right,right,right,right,left");
hstgrid.setColSorting("str,int,date,date,str,str");
hstgrid.enableTreeGridLines(true);
hstgrid.enableTreeCellEdit(false);
hstgrid.setSkin('dhx_skyblue');
hstgrid.init();
hstgrid.setSkin('dhx_skyblue');

dhxLayout.cells("b").collapse();
function GridRefresh() {
    var currentTime = new Date();
    var hours = currentTime.getHours();
    var minutes = currentTime.getMinutes();
    var seconds = currentTime.getSeconds();
    if (minutes < 10){
    minutes = "0" + minutes;
    }
    if (seconds < 10){
    seconds = "0" + seconds;
    }
    toolbar.setItemText( "refresh", hours + ":" + minutes + ":" +  seconds );
    var page_number = mygrid.currentPage;
    var checkedRows = mygrid.getCheckedRows(1);
    if (checkedRows === "")
    {
        mygrid.loadXML( "{{ url('xml_JOC_orders_list') }}?time="+seconds+'&activated='+activated+'&steps='+steps, function(){
//            mygrid.loadOpenStates();
//            toolbar.setItemState("deploy",false);
            mygrid.changePage(page_number);
            mygrid.refreshFilters();
            mygrid.filterByAll();
        });
    } else
    {
        mygrid.loadXML( "{{ url('xml_JOC_orders_list') }}?time="+seconds+'&activated='+activated+'&steps='+steps+"&checked_rows="+encodeURIComponent(checkedRows), function(){
//            mygrid.loadOpenStates();
//            toolbar.setItemState("deploy",false);
            mygrid.changePage(page_number); 
            mygrid.refreshFilters();
            mygrid.filterByAll();
        });
    }
}

function GlobalRefresh()
{
    GridRefresh();
}

var dhxWins = new dhtmlXWindows();
dhxWins.enableAutoViewport(false);
dhxWins.attachViewportTo("wrapper");
dhxWins.setImagePath("{{ asset('bundles/ariicore/js/dhtmlx/dhtmlxWindows/codebase/imgs/') }}");

function onButtonClick(menuitemId) {
    var data = mygrid.contextID.split("_");
    var rId = data[0];
    var cInd = data[1];
    var command;
    switch (menuitemId) {
        case "start_task":
            StartJob( rId );
        break;
        case "show_info":
        break;
        case "show_history":
            if(rId.substr(0,3)==="OR#")
            {
               var id = rId.substr(3);
               document.location.href = "{{ url('arii_JID_order_history') }}?id="+id;
            }
            else {
               document.location.href = "{{ url('arii_JID_order_history') }}?id="+rId;
            }
        break;
        case "add_order":
            if(rId.substr(0,2)==="C#")
            {
                var id = rId.substr(2);
                AddOrder(id);
            }
            if(rId.substr(0,3)==="OR#")
            {
                var id = rId.substr(3);
                AddOrder(id);
            }
        break;
        case "start_order":
            // Traitement planifie
            if(rId.substr(0,2)==="O#") {
               var id = rId.substr(2);
               StartOrderPlan(id);
            }
            else {
               var id = rId.substr(3);
               StartOrder(rId);
            } 
        break;
        case "job_log":
            window.open("{{ url('arii_JID_job_log_upload') }}?id="+rId);
            break;
        case "job_detail":
            dhxLayout.cells("b").progressOn();
            dhxLayout.cells("b").setText("{{ "Job" | trans }}");
            tabbar.cells("b1").attachURL("{{ url('arii_JID_detail_job') }}?id="+rId,true);
            dhxLayout.cells("b").expand();
            toolbar.setItemState("contract",true);
            jobloggrid.load( "{{ url('xml_JID_job_log') }}?id="+rId, function () {
                 tabbar.showTab("b3");
                 tabbar.hideTab("b2",true);
                 tabbar.hideTab("b4",true);
                 dhxLayout.cells("b").progressOff();
             });
             break;
         case "order_log":
            window.open("{{ url('arii_JID_order_log_upload') }}?id="+rId); 
            break;
        case "order_detail":
            if (rId.substr(0,2)=='O#') 
                id=rId.substr(2);
          dhxLayout.cells("b").progressOn();
          dhxLayout.cells("b").setText("{{ "Order" | trans }}");
          tabbar.cells("b1").attachURL("{{ url('arii_JID_detail_order') }}?id="+id,true);
          // dans tous les cas on recharge le log
          hstgrid.load( "{{ url('arii_JID_grid_history_order') }}?id="+ id, function () {
            tabbar.hideTab("b3",true);
              tabbar.showTab("b4");
              loggrid.load( "{{ url('arii_JID_order_log') }}?id="+ id, function () {
              tabbar.showTab("b2");
              // tabbar.cells("b5").attachURL("{{ url('arii_JID_process_graphviz') }}?order_id="+id,true);
              dhxLayout.cells("b").expand();
              toolbar.setItemState("contract",true);
              dhxLayout.cells("b").progressOff();
            });
          });

            break;
        case "suspend_order":
        case "resume_order":
        case "reset_order":
        case "remove_setback":
            if (rId.substr(0,2)==="O#") { 
                 MenuAction(rId.substr(2),menuitemId);
            }
            else {
                MenuAction(rId,menuitemId);
            }
           
        break;
        case "unstop":
            if (rId.substr(0,2) === "S#")
            {
                id = rId.substr(2);
            } else {
                id= rId.substr(1);
            }
            MenuAction(id,"unstop_node");
            return true;
        break;
        case "stop":
            if (rId.substr(0,2) === "S#")
            {
                id = rId.substr(2);
            } else {
                id= rId.substr(1);
            }
            MenuAction(id,"stop_node");
            return true;
        break;
        case "skip":
            if (rId.substr(0,2) === "S#")
            {
                id = rId.substr(2);
            } else {
                id= rId.substr(1);
            }
            MenuAction(id,"skip_node");
            return true;
        break;
        case "unskip":
            if (rId.substr(0,2) === "S#")
            {
                id = rId.substr(2);
            } else {
                id= rId.substr(1);
            }
            MenuAction(id,"unskip_node");
            //UnskipNode(id);
            return true;
        break;
        case "stop_chain":
            if(rId.substr(0,2)==="C#")
            {
                var id = rId.substr(2);
                command = "stop_chain";
                MenuAction(id,command);
                //StopChain(id);
            }
            return true;
        break;
        case "unstop_chain":
            if(rId.substr(0,2)==="C#")
            {
                var id = rId.substr(2);
                command = "unstop_chain";
                MenuAction(id,command);
                //UnstopChain(id);
            }
            return true;
        break;
        case "pause_spooler":
            PauseSpooler(rId);
        break;
        case "continue_spooler":
            ContinueSpooler(rId);
        break;
        case "check_spooler":
            CheckSpooler(rId);
        break;
        case "terminate_spooler":
            TerminateSpooler(rId);
        break;
        case "abort_spooler":
            AbortSpooler(rId);
        break;
        case 'doc':
            window.open('{{ url('arii_JID_order_doc') }}?id='+rId,'arii_doc');
            break;        
        case 'process':
            document.location.href = "{{ url('arii_JID_process') }}?id="+rId;
            break;
        case "purge":
            PurgeOrder( rId );
            break;                
        default:
            alert(menuitemId);    
    }
    return true;
}

function MenuAction(id,command)
{
    switch (command) {
        case 'check_spooler':
            message= "{{ "Check spooler" | trans }}";
            break;
        case 'add_order':
            message= "{{ "Add order" | trans }}";
            break;
        case 'continue_spooler':
            message= "{{ "Continue spooler" | trans }}";
            break;
        case 'pause_spooler':
            message= "{{ "Pause spooler" | trans }}";
            break;
        case 'remove_setback':
            message= "{{ "Remove setback" | trans }}";
            break;
        case 'reset_order':
            message= "{{ "Reser order" | trans }}";
            break;
        case 'resume_order':
            message= "{{ "Resume order" | trans }}";
            break;
        case 'show_history':
            message= "{{ "Show history" | trans }}";
            break;
        case 'skip':
            message= "{{ "Skip node" | trans }}";
            break;
        case 'start_order':
            message= "{{ "Start order" | trans }}";
            break;
        case 'suspend_order':
            message= "{{ "Suspend order" | trans }}";
            break;
        case 'terminate_spooler':
            message= "{{ "Terminate spooler" | trans }}";
            break;
        case 'unskip':
            message= "{{ "Unskip job" | trans }}";
            break;
        case 'unstop':
            message= "{{ "Unstop job" | trans }}";
            break;
        case 'stop_chain':
            message= "{{ "Stop job chain" | trans }}";
            break;
        case 'unstop_chain':
            message= "{{ "Unstop job chain" | trans }}";
            break;
        default:
            message= "{{ "Command" | trans }}: "+command;
    }
    dhtmlx.message({
        type: "Notice",
        text: message
    });
    // alert("{{ url('arii_XML_Command') }}?command="+command+"&id="+id);
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command="+command+"&id="+id,function(loader){
        dhtmlx.message({
        type: "Notice",
        expire: 10000,
        width: "500px",
        text: loader.xmlDoc.responseText
        });
        GridRefresh();
    });
}

function SelectedOrderOptions(option)
{
var ids = mygrid.getCheckedRows(1);
if (ids === "")
{
    return false;
}
var largeur = 600;  
msg = dhxWins.createWindow( "selectedOrders" , (document.getElementById("wrapper").offsetWidth-largeur)/2, 200, largeur, 500 ); 
msg.setText(option+"{{ " Orders" | trans }}");
    
var winLayout;
winLayout = msg.attachLayout("1C");
winLayout.cells("a").hideHeader();   

var toolbar;
toolbar = winLayout.cells("a").attachToolbar();
toolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
toolbar.loadStruct("{{ url('arii_JID_toolbar_start_orders') }}");
toolbar.attachEvent("onClick",function(buttonId){
    switch (buttonId) {
        case "submit":
            dhxgrid.forEachRow(function(id){
                switch (option)    
                {
                    case "Start":
                        winLayout.cells("a").progressOn();
                        dhtmlxAjax.post("{{ url('arii_XML_Command') }}","command=start_order&order_id="+id,function(loader,response){
                            winLayout.cells("a").progressOff();
                            dhtmlx.message({
                            type: "Notice",
                            expire: 10000,
                            width: "500px",
                            text: loader.xmlDoc.responseText });
                            GridRefresh();
                        });    
                        break;
                    case "Suspend":
                        SuspendOrder(id);
                        break;
                    case "Resume":
                        ResumeOrder(id);
                        break;
                    case "Reset":
                        ResetOrder(id);
                        break;
                    case "Delete":
                        DeleteOrder(id);
                        break;
                    default:
                        break;
                }
                });
            break;
        case "cancel":
            msg.close();
            break;
        default:
            alert(buttonId);
    }
    return true;
});


var dhxgrid = winLayout.cells("a").attachGrid();
dhxgrid.selMultiRows = true;
dhxgrid.setHeader("{{ "Order Name" | trans }},{{ "Job Chain" | trans }},{{ "Status" | trans }}");
dhxgrid.setColTypes("ro,ro,ro");
dhxgrid.setInitWidths("*,180,180");
dhxgrid.setPagingSkin("toolbar","dhx_skyblue");
dhxgrid.init();
dhxgrid.loadXML("{{ url('arii_JID_orders_selected_orders') }}?ids="+encodeURIComponent(ids));

return true;
        
}

function PauseSpooler(rid)
{
    dhxLayout.cells("a").progressOn();
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command=pause_spooler&spooler_id="+rid,function(loader,response){
        dhxLayout.cells("a").progressOff();
        dhtmlx.message({
            type: "Notice",
            expire: 10000,
            width: "500px",
            text: loader.xmlDoc.responseText
        });
        CheckSpooler(rid);
    });
    return true;
}

function ContinueSpooler(rid)
{
    dhxLayout.cells("a").progressOn();
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command=continue_spooler&spooler_id="+rid,function(loader){
        dhxLayout.cells("a").progressOff();
        dhtmlx.message({
            type: "Notice",
            expire: 10000,
            width: "500px",
            text: loader.xmlDoc.responseText
        });
        CheckSpooler(rid);
    });
    return true;
}

function TerminateSpooler(rid)
{
    dhxLayout.cells("a").progressOn();
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command=restart_spooler&spooler_id="+rid,function(loader){
        dhxLayout.cells("a").progressOff();
        dhtmlx.message({
            type: "Notice",
            expire: 10000,
            width: "500px",
            text: loader.xmlDoc.responseText
        });
        CheckSpooler(rid);
    });
    return true;
}

function CheckSpooler(rid)
{
    dhxLayout.cells("a").progressOn();
    dhtmlxAjax.get("{{ url('arii_JID_spooler_update') }}?id="+rid,function(loader){
        dhxLayout.cells("a").progressOff();
        dhtmlx.message({
            type: "Notice",
            expire: 10000,
            width: "500px",
            text: loader.xmlDoc.responseText
        });
        GridRefresh();
    });
    return true;
}

function AbortSpooler(rid)
{
    dhxLayout.cells("a").progressOn();
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command=abort_spooler&spooler_id="+rid,function(loader){
        dhxLayout.cells("a").progressOff();
        dhtmlx.message({
            type: "Notice",
            expire: 10000,
            width: "500px",
            text: loader.xmlDoc.responseText
        });
        GridRefresh();
    });
    return true;
}
var dhxCalendar,msg;

function AddOrder(id)
{
    var largeur = 600;
        msg = dhxWins.createWindow( "msgwin" ,  (document.getElementById("wrapper").offsetWidth-largeur)/2, 50, largeur, 400 );
        msg.setText("{{ "Add order" | trans }}");
        
    var winLayout;
    winLayout = msg.attachLayout("2E");
    winLayout.cells('a').hideHeader();
    winLayout.cells('b').hideHeader();
    winLayout.cells('a').setHeight(150);
    
    var toolbar;
    toolbar = winLayout.cells('a').attachToolbar();
    toolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    toolbar.loadStruct("{{ url('arii_JID_toolbar_add_order') }}",function(){
        GBCalendar = new dhtmlXCalendarObject(toolbar.getInput('ref_date'));
        GBCalendar.setDateFormat("%Y-%m-%d %H:%i:%s");
        GBCalendar.setWeekStartDay(1);
    });

    var toolbar2;
    toolbar2 = winLayout.cells("b").attachToolbar();
    toolbar2.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    toolbar2.loadXML("{{ url('xml_JID_toolbar_order_param') }}");

    toolbar.attachEvent("onClick",function(itemid){
        switch(itemid) {
            case "new":
                dhxgrid.addRow(dhxgrid.getRowsNum()+1,"");
                break;
            case "submit":
                msg.progressOn();
                var params = new Array();
                dhxgrid.forEachRow(function(id){
                    var param = dhxgrid.cells(id,0).getValue() + "=" + encodeURIComponent(dhxgrid.cells(id,1).getValue());
                    params.push(param);
                });
                var paramsStr = params.join(",");
                dhtmlx.message({
                    type: "Notice",
                    text: "{{ "Add order" | trans }}"
                });
                msg.close();
                dhxForm.send("{{ url('arii_XML_Command') }}?command=add_order&id="+id+"&paramsStr="+encodeURIComponent(paramsStr),"POST",function(loader,response){
                    dhtmlx.message({
                        type: "Notice",
                        expire: 10000,
                        width: "500px",
                        text: loader.xmlDoc.responseText
                    });
                    GridRefresh();
                });
                
                break;
            case "cancel":
                msg.close();
                break;
            default:
                break;
        }
        return true;
    });

    toolbar2.attachEvent("onClick",function(itemid){
        switch(itemid) {
            case "new":
                dhxgrid.addRow(dhxgrid.getRowsNum()+1,"");
                break;
            default:
                break;
        }
        return true;
    });

    var dhxgrid = winLayout.cells("b").attachGrid();
    dhxgrid.selMultiRows = true;
    dhxgrid.setHeader("{{ "Name" | trans }},{{ "Value" | trans }}");
    dhxgrid.setColTypes("ed,ed");
    dhxgrid.setInitWidths("*,*");
    dhxgrid.setPagingSkin("toolbar","dhx_skyblue");
    dhxgrid.init();
    dhxgrid.loadXML("{{ url('xml_JID_add_order_parameters') }}?id="+id);
    
    var formData = [
        { type: "settings", inputWidth: 420, position: "label-left", labelWidth: 100, labelAlign: "left", position: "label-left", offsetLeft: 10 },
        {   type: "hidden", 
            name: "command",     
            value: "add_order"
        },                
        {   type: "input",
            name: "order_id",
            label: "{{ "Order ID" | trans }}"
        },
        {
            type: "input",
            name: "title",
            label: "{{ "Title" | trans }}"
        },
        {   type: "combo",
           name: "start_state",
           label: "{{ "Start state" | trans }}",
           connector: "{{ url('arii_JID_select_state') }}?id="+id
        },
        {  type: "combo",
           name: "end_state",
           label: "{{ "End state" | trans }}",
           options: [{text: "none",value: ""}],
           connector: "{{ url('arii_JID_select_state') }}?id="+id
        }
    ];
    
    var dhxForm = winLayout.cells('a').attachForm(formData);
    dhtmlXCalendarObject.prototype.langData["fr"] = {
            monthesFNames: ["Janvier","Février","Маrs","Аvril","Маi","Juin","Juillet","Аoût","Septembre","Оctobre","Novembre","Décembre"],
            monthesSNames: ["Jan.","Fév.","Маrs","Аvr","Маi","Juin","Jui.","Août","Sep.","Оct.","Nov.","Déc."],
            daysFNames: ["Dimanche","Lundi","Mardi","Mercredi","Jeudi","Vendredi","Samedi"],
            daysSNames: ["Di","Lu","Ma","Me","Je","Ve","Sa"],
            weekstart: 1
    };
    dhxCalendar = new dhtmlXCalendarObject(dhxForm.getInput("at"));
    dhxCalendar.loadUserLanguage("fr");
    dhxCalendar.setDateFormat("%Y-%m-%d %H:%i:%s");
    dhxCalendar.showTime();
      
    return true;
    
}


function StartOrder(id)
{
var largeur = 600;
    msg = dhxWins.createWindow( "msgwin" ,  (document.getElementById("wrapper").offsetWidth-largeur)/2, 50, largeur, 500 );
    msg.setText("{{ "Start order " | trans }} "+id);
        
    var winLayout;
    winLayout = msg.attachLayout("2E");
    winLayout.cells("a").hideHeader();
    winLayout.cells("a").setHeight(300);
    winLayout.cells("b").hideHeader();
    
    winLayout.cells("a").attachURL("{{ url('arii_JID_detail_order') }}?id="+id,true);

    var toolbar;
    toolbar = winLayout.cells("a").attachToolbar();
    toolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    toolbar.loadStruct("{{ url('arii_JID_toolbar_start_order') }}",function(){
        GBCalendar = new dhtmlXCalendarObject(toolbar.getInput('ref_date'));
        GBCalendar.setDateFormat("%Y-%m-%d %H:%i:%s");
        GBCalendar.setWeekStartDay(1);
    });

    var toolbar2;
    toolbar2 = winLayout.cells("b").attachToolbar();
    toolbar2.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    toolbar2.loadXML("{{ url('xml_JID_toolbar_order_param') }}");
    
    toolbar.attachEvent("onClick",function(itemid){
        switch(itemid) {
            case "submit":
                msg.progressOn();
                var params = new Array();
                dhxgrid.forEachRow(function(id){
                    var param = dhxgrid.cells(id,0).getValue() + "=" + encodeURIComponent(dhxgrid.cells(id,1).getValue());
                    params.push(param);
                });
                var paramsStr = params.join(",");
                var start_time = toolbar.getValue("ref_date");
                dhtmlx.message({
                type: "Notice",
                text: "{{ "Start order" | trans }} <strong>"+id+"</strong>" });
                msg.close();
                dhtmlxAjax.post("{{ url('arii_XML_Command') }}","command=start_order&params="+encodeURIComponent(params)+"&time="+start_time+"&order_id="+id,function(loader,response){
                                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                    GridRefresh();
                });
                break;
            case "cancel":
                msg.close();
                break;
            default:
                break;
        }
        return true;
    });

    toolbar2.attachEvent("onClick",function(itemid){
        switch(itemid) {
            case "new":
                dhxgrid.addRow(dhxgrid.getRowsNum()+1,"");
                break;
            default:
                break;
        }
        return true;
    });

    var dhxgrid = winLayout.cells("b").attachGrid();
    dhxgrid.selMultiRows = true;
    dhxgrid.setHeader("{{ "Name" | trans }},{{ "Value" | trans }}");
    dhxgrid.setColTypes("ed,ed");
    dhxgrid.setInitWidths("*,*");
    dhxgrid.setPagingSkin("toolbar","dhx_skyblue");
    dhxgrid.init();
    dhxgrid.loadXML("{{ url('xml_JID_start_order_parameters') }}?id="+id);
    
    return true;          
}

function StartOrderPlan(id)
{
var largeur = 600;
    msg = dhxWins.createWindow( "msgwin" ,  (document.getElementById("wrapper").offsetWidth-largeur)/2, 50, largeur, 500 );
    msg.setText("{{ "Start order " | trans }} "+id);
        
    var winLayout;
    winLayout = msg.attachLayout("2E");
    winLayout.cells("a").hideHeader();
    winLayout.cells("a").setHeight(300);
    winLayout.cells("b").setText("Parameters");
    winLayout.cells("b").hideHeader();
    winLayout.cells("a").attachURL("{{ url('arii_JID_detail_order_plan') }}?id="+id,true);

    var toolbar;
    toolbar = winLayout.cells("a").attachToolbar();
    toolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    toolbar.loadStruct("{{ url('arii_JID_toolbar_start_order') }}",function(){
        GBCalendar = new dhtmlXCalendarObject(toolbar.getInput('ref_date'));
        GBCalendar.setDateFormat("%Y-%m-%d %H:%i:%s");
        GBCalendar.setWeekStartDay(1);
    });

    var toolbar2;
    toolbar2 = winLayout.cells("b").attachToolbar();
    toolbar2.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    toolbar2.loadXML("{{ url('xml_JID_toolbar_order_param') }}");

    toolbar.attachEvent("onClick",function(itemid){
        switch(itemid) {
            case "submit":
                msg.progressOn();
                var params = new Array();
                dhxgrid.forEachRow(function(id){
                    var param = dhxgrid.cells(id,0).getValue() + "=" + encodeURIComponent(dhxgrid.cells(id,1).getValue());
                    params.push(param);
                });
                var paramsStr = params.join(",");
                var start_time = toolbar.getValue("ref_date");
                dhtmlx.message({
                type: "Notice",
                text: "{{ "Start order" | trans }} <strong>"+id+"</strong>" });
                msg.close();

                dhtmlxAjax.post("{{ url('arii_XML_Command') }}","command=start_order&params="+encodeURIComponent(params)+"&time="+start_time+"&plan=yes&order_id="+id,function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                    GridRefresh();
                });
                break;
            case "cancel":
                msg.close();
                break;
            default:
                break;
        }
        return true;
    });

    toolbar.attachEvent("onClick",function(itemid){
        switch(itemid) {
            case "new":
                dhxgrid.addRow(dhxgrid.getRowsNum()+1,"");
                break;
            default:
                break;
        }
        return true;
    });

    var dhxgrid = winLayout.cells("b").attachGrid();
    dhxgrid.selMultiRows = true;
    dhxgrid.setHeader("{{ "Name" | trans }},{{ "Value" | trans }}");
    dhxgrid.setColTypes("ed,ed");
    dhxgrid.setInitWidths("*,*");
    dhxgrid.setPagingSkin("toolbar","dhx_skyblue");
    dhxgrid.init();
    dhxgrid.loadXML("{{ url('xml_JID_start_order_parameters') }}?id="+id);
    
    return true;          
}

function onShowMenu(rowId,cleInd,grid) 
{
    if(mygrid.getUserData(rowId,"type")==="folder")
    {
        return false;
    }
    var status = grid.cells(rowId,4).getValue();
    var state = grid.cells(rowId,5).getValue();
    menu.hideItem('doc');
    menu.hideItem('process');
    menu.hideItem('purge');
    menu.hideItem('sep1');
    menu.hideItem('show_history');
    menu.hideItem('check_spooler');
    menu.hideItem('terminate_spooler');
    menu.hideItem('pause_spooler');
    menu.hideItem('continue_spooler');
    menu.hideItem("add_order");
    menu.hideItem("remove_setback");
    menu.hideItem("reset_order");
    menu.hideItem("resume_order");
    menu.hideItem("show_history");
    menu.hideItem("skip");
    menu.hideItem("start_order");
    menu.hideItem("stop");
    menu.hideItem("stop_chain");
    menu.hideItem("suspend_order");
    menu.hideItem("order_detail");
    menu.hideItem("order_log");
    menu.hideItem("unskip");
    menu.hideItem("unstop");
    menu.hideItem("unstop_chain");    
    menu.hideItem("unstop_job");    
    menu.hideItem("job_detail");
    menu.hideItem("job_log");
    menu.hideItem("sep1");    
    menu.hideItem("doc");
    menu.hideItem("process");   
    if (mygrid.getUserData(rowId,"type")==="spooler")
    {
        menu.showItem('check_spooler');
        {% if is_granted('ROLE_OPERATOR') %}
        menu.showItem('terminate_spooler');
        if (status ==='RUNNING') {
            menu.showItem('pause_spooler');    
        }
        else {
            menu.showItem('continue_spooler');    
        }
        {% endif %}
        return true;
    }
    if(mygrid.getUserData(rowId,"type")==="step_job" || mygrid.getUserData(rowId,"type")==="action_step")
    {
        menu.showItem("doc");    
        menu.showItem("job_log");    
        menu.showItem("job_detail");    
        {% if is_granted('ROLE_OPERATOR') %}
        menu.showItem("sep1");    
        // Etat du traitement
        if(state === "SKIP")
        {
            menu.showItem("unskip");
            menu.showItem("stop");
        }
        else if(state === "STOP")
        {
            menu.showItem("unstop");
            menu.showItem("skip");
        }
        else if(state === "STOP")
        {
            menu.showItem("unstop");
            menu.showItem("skip");
        }
        else {
            menu.showItem("stop");
            menu.showItem("skip");
        }
        
        // statut du job
        if (status === "JOB STOP!") {
            menu.showItem("unstop_job");
        }
        else if (status === "SKIPPED") {
            menu.showItem("unskip");
        }
 
        {% endif %}
        return true;
    }
    if (mygrid.getUserData(rowId,"type").substr(0,5)==="order")
    {
        // pas de start pour un ordre dynamique
        menu.showItem("doc");
        menu.showItem("order_log");    
        menu.showItem("order_detail");    
        if (mygrid.getUserData(rowId,"type")==="order add") {
        }
        {% if is_granted('ROLE_OPERATOR') %}            
        else {
             menu.showItem("start_order");
             menu.showItem("suspend_order");
             menu.showItem("sep1");     
        }
        {% endif %}
        if (mygrid.getUserData(rowId,"type")!=="order planned") {
        {% if is_granted('ROLE_OPERATOR') %}
            menu.showItem("purge");
        {% endif %}
            menu.showItem("process");
            menu.showItem("show_history");
        }
        menu.setItemEnabled("stop");
        if (status === "SUSPENDED")
        {
        {% if is_granted('ROLE_OPERATOR') %}
           menu.showItem("resume_order");
           menu.showItem("reset_order");
           {% endif %}
        } 
        else if (status === "SETBACK") {
        {% if is_granted('ROLE_OPERATOR') %}
           menu.showItem("suspend_order");
           menu.showItem("remove_setback");
           menu.showItem("reset_order");
        {% endif %}
           menu.hideItem("start_order");
        }
        else {
            menu.hideItem("resume_order");
            menu.hideItem("reset_order");
        }
        return true;
    }
    if(mygrid.getUserData(rowId,"type")==="job_chain")
    {
        menu.showItem("doc");
        {% if is_granted('ROLE_OPERATOR') %}
        menu.showItem("sep1");    
        menu.showItem("add_order");
        if (status === "ACTIVE")
        {
            menu.hideItem("unstop_chain");
            menu.showItem("stop_chain");
        } else if (status === "STOPPED"){
            menu.showItem("unstop_chain");
            menu.hideItem("stop_chain");
        }
        {% endif %}
        return true;
    }
    // for the action_step job, the row ID is spooler_id/job_chain/state, then in the soscontroller, we can't use the same stop unstop skip unskip case,
    // we need a new case to deal with this, the new case will request to the scheduler_job_chain_nodes where concat(SPOOLER_ID,JOB_CHAIN,ORDER_STATE)=id
    // i do a test, if it's not ok, delete it then
    return false;
}

function JobLog( id ) { 
    var p = 0;
    dhxWins.forEachWindow(function() {
        p++;
    });
    if (p > 3) {
        alert("Too many windows");
        return;
    }
    var idwin = 'win'+(nbwin++);
    var win = dhxWins.createWindow( idwin, 50*nbwin, 20*nbwin, document.getElementById("wrapper").offsetWidth-20-( 5*nbwin), 220-( 20*nbwin));
    win.setText("Job log "+id);
    win.attachURL( "{{ url('arii_JID_detail_job')  }}?id="+id , true);
}

function StartJob( id ) { 
    var msg = dhxWins.createWindow( "msgwin" , (document.getElementById("wrapper").offsetWidth-200)/2, 200,500,200 );
    msg.setText("Start job "+id);
    msg.attachURL( "{{ url('arii_JID_start_job', {"id": 0 } )  }}"+id , true);
}

function PurgeOrder( id ) { 
    var largeur = 600;
        msg = dhxWins.createWindow( "msgwin" ,  (document.getElementById("wrapper").offsetWidth-largeur)/2, 200, largeur, 400 );
        msg.setText("{{ "Purge order" | trans }} "+id);

    var winLayout;
    winLayout = msg.attachLayout("1C");
    winLayout.cells("a").hideHeader();
    winLayout.cells("a").attachURL("{{ url('arii_JID_detail_order') }}?id="+id,true);

    var toolbar;
    toolbar = winLayout.cells("a").attachToolbar();
    toolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
    toolbar.loadStruct("{{ url('arii_JID_toolbar_purge_order') }}");

    toolbar.attachEvent("onClick",function(itemid){
        switch (itemid) {
            case "stop":
                msg.progressOn();
                dhtmlx.message({
                type: "Notice",
                text: "{{ "Purge order" | trans }} <strong>"+id+"</strong>" });
                msg.close();
                dhtmlxAjax.post("{{ url('arii_JID_order_purge') }}","order_id="+id,function(loader,response){
                    dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: loader.xmlDoc.responseText });
                    GridRefresh();
                });
                break;
            case "cancel":
                msg.close();
                break;
            default: 
                break;
        }
        return true;
    });
    
return true;
}

</script>
		<!--[if !IE]>end section content top<![endif]-->
		<!--[if !IE]>start section content bottom<![endif]-->
		<span class="scb"><span class="scb_left"></span><span class="scb_right"></span></span>
		<!--[if !IE]>end section content bottom<![endif]-->
		
	</div>
	<!--[if !IE]>end section content<![endif]-->
</div>
<!--[if !IE]>end section<![endif]-->
{% endblock %}
{% block calendar %}      
    {{ render(controller("AriiJIDBundle:Sidebar:calendar", { 'mode': 'Past'} )) }}
{% endblock %}