{# src/Arii/JOCBundle/Resources/views/orders.html.twig #}

{% extends "AriiJOCBundle::layout.html.twig" %}
{% block content %}
<!--[if !IE]>start section<![endif]-->	
<div class="section table_section">
	<!--[if !IE]>start title wrapper<![endif]-->
	<div class="title_wrapper">
		<h2>{{ "Orders" | trans }}</h2>
<ul  class="section_menu">
      <li><a href="{{ url('arii_JOC_orders_list') }}" class="active"><span><span>{{ "List" | trans }}</span></span></a></li>
      <li><a href="{{ url('arii_JOC_orders_charts') }}" class=""><span><span>{{ "Charts" | trans }}</span></span></a></li>
</ul>
		<span class="title_wrapper_left"></span>
		<span class="title_wrapper_right"></span>
	</div>
	<!--[if !IE]>end title wrapper<![endif]-->
<!--[if !IE]>start section content<![endif]-->
	<div class="section_content">
		<!--[if !IE]>start section content top<![endif]-->
		<div class="sct">
			<div class="sct_left">
				<div class="sct_right">
					<div class="sct_left">
                                                <div class="sct_right">
    <div id="mygrid" style="height:500px;background-color:white;overflow:hidden;position:relative;"></div>
						</div>
					</div>
				</div>
			</div>
		</div>
<script language="javascript">
var autorefresh = setInterval( "GridRefresh()",30000);

menu = new dhtmlXMenuObject(null);
menu.setIconsPath( "{{ asset('bundles/ariicore/images/menu/') }}" );
menu.renderAsContextMenu();
menu.attachEvent("onClick", onButtonClick);
menu.loadStruct("{{ url('arii_JOC_menu_orders') }}");

var mygrid;
var barChart;
var myForm, formData;
var dhxLayout = new dhtmlXLayoutObject("mygrid","3T");
var toolbar = dhxLayout.attachToolbar();
toolbar.setIconsPath("{{ asset('bundles/ariicore/images/toolbar/') }}");
toolbar.loadStruct("{{ url('arii_JOC_toolbar') }}");
toolbar.attachEvent( "onClick", function(id, value) {
    switch (id) {
        case "refresh":
            GridRefresh();
        break;
        default:
            alert(id);
    }
});
toolbar.attachEvent( "onValueChange", function(id, value) {
   switch (id) {
        case "slider":
            clearInterval( autorefresh );
            GridRefresh();
            autorefresh = setInterval( "GridRefresh()",value*1000);
        break;
        default:
            alert(id);
    }
});
toolbar.attachEvent("onStateChange",function(id,state){
    dhtmlxAjax.get("{{ url('arii_global_toolbar_update') }}?"+id+"="+state,function(loader){
        GlobalRefresh();
    });
});
dhxLayout.cells("a").hideHeader();

dhxLayout.cells("b").setWidth(700);
dhxLayout.cells("b").setHeight(245);
dhxLayout.cells("b").setText("{{ 'Order information' | trans }}");
dhxLayout.cells("c").setText("{{ 'Order log' | trans }}");

mygrid = dhxLayout.cells("a").attachGrid();
var sb = dhxLayout.cells("a").attachStatusBar();
dhxLayout.cells("a").vs[dhxLayout.cells("a").av].sbHeight = 40;
sb.setText('<div id="recinfoArea"></div>');
mygrid.selMultiRows = true;
mygrid.setImagePath( "{{ asset('bundles/ariicore/images/treegrid/') }}");
mygrid.enableTreeCellEdit(false);
mygrid.setHeader("{{ "Location" | trans }},{{ "State" | trans }},{{ "Next Start Time" | trans }},{{ "Last Write Time" | trans }},{{ "Updated Time" | trans }}");
mygrid.attachHeader("#text_filter,#select_filter,#text_filter,#text_filter,#text_filter");
mygrid.setInitWidths("*,150,180,180,180");
mygrid.setColAlign("left,left,left,left,left");
mygrid.setColTypes("tree,ro,ro,ro,ro");
mygrid.enableTreeGridLines(true);
mygrid.setColSorting("str,str,date,date,date");
mygrid.enableContextMenu(menu);
//mygrid.attachEvent("onBeforeContextMenu", onShowMenu);
mygrid.enablePaging(true, "25", 5, "recinfoArea");
mygrid.setPagingSkin("toolbar","dhx_skyblue");
mygrid.setPagingWTMode(true,true,true,["25"]);
mygrid.init();
mygrid.setSkin('dhx_skyblue');
mygrid.loadXML( "{{ url('xml_JOC_orders_list') }}" );
mygrid.enableLightMouseNavigation( true );
mygrid.attachEvent("onXLE",function(){
    //will be called after each xml loading
    mygrid.refreshFilters();
    mygrid.filterByAll();
});

mygrid.attachEvent("onRowDblClicked",function(id, value){
    if(!isNaN(id))
    {
       dhxLayout.cells("b").attachURL("{{ url('arii_JOC_detail_order') }}?id="+id,true); 
       dhxLayout.cells("c").attachURL("{{ url('arii_JOC_order_log') }}?id="+id,true);     
    } else
    {
       var ids = id.split("");
       if(ids[0]=="O" && ids[1]=="R" && ids[2]=="#")
       {
          //var order_id = mygrid.cells(id,0).getValue();
          var oid = id.substr(3);
          dhxLayout.cells("b").attachURL("{{ url('arii_JOC_detail_order') }}?id="+oid,true);
          dhxLayout.cells("c").attachURL("{{ url('arii_JOC_order_log') }}?id="+oid,true);
          
       }
       if(ids[0]=="O" && ids[1]=="#")
       {
           alert("Stored:"+id);
       }
    }
});
// Autorefresh

function GridRefresh() {
    var currentTime = new Date();
    var hours = currentTime.getHours();
    var minutes = currentTime.getMinutes();
    var seconds = currentTime.getSeconds();
    if (minutes < 10){
    minutes = "0" + minutes;
    }
    if (seconds < 10){
    seconds = "0" + seconds;
    }
    toolbar.setItemText( "refresh", hours + ":" + minutes + ":" +  seconds );
    //mygrid.clearAll();
    mygrid.loadXML( "{{ url('xml_JOC_orders_list') }}?time="+seconds );
}

var dhxWins = new dhtmlXWindows();
dhxWins.enableAutoViewport(false);
dhxWins.attachViewportTo("wrapper");
dhxWins.setImagePath("{{ asset('bundles/ariicore/js/dhtmlx/dhtmlxWindows/codebase/imgs/') }}");

var nbwin=1;

var win_history,
    dhxLayout,
    BarChart;
function OrderHistory(id)
{
    var win_history = dhxWins.createWindow("order_history",5*nbwin, 20*nbwin, document.getElementById("wrapper").offsetWidth-20-( 5*nbwin), 800-( 20*nbwin));
    win_history.setText("{{ "JOB History" | trans }}"+id);
    dhxLayout = win_history.attachLayout("3T");
    dhxLayout.cells("a").setText("{{ "Order History" | trans }}");
    
    HistoryGrid = dhxLayout.cells("a").attachGrid();
    HistoryGrid.setHeader("{{ "Start time" | trans }},{{ "End time" | trans }},{{ "Duration" | trans }},{{ "State" | trans }}");
    HistoryGrid.attachHeader("#text_filter,#text_filter,#text_filter,#text_filter");
    HistoryGrid.setInitWidths("130,130,100,*");
    HistoryGrid.setColAlign("right,right,right,left");
    HistoryGrid.setColTypes("ro,ro,ro,ro");
    HistoryGrid.setColSorting("date,date,str,str");
    HistoryGrid.setSkin('dhx_skyblue');
    HistoryGrid.loadXML( "{{ url('arii_JOC_grid_history_order') }}?id="+id );
    HistoryGrid.enableAlterCss("even_row","odd_row");
    HistoryGrid.init();
    
    dhxLayout.cells("b").setText("{{ "Graph" | trans }}");
    var BarChart = dhxLayout.cells("b").attachChart( {
        view: "scatter",
        xValue: "#start#",
        yValue: "#duration#",
        color: "#color#",
        item:{
            label: "",
            borderColor: "#color#" ,
            color: "#color#",
            type: 'r'
        },
        yAxis:{
            title: "{{ "Duration" | trans }} (s)"
        },
        xAxis:{
            title: "{{ "Start time" | trans }}",
            template: ""
        }
    });
    BarChart.attachEvent("onItemClick", function(id){
        dhxLayout.cells("c").attachURL( "{{ url('arii_JOC_order_log') }}?id="+id , true);
        HistoryGrid.selectRowById(id);
        
    });
    
    BarChart.load( "{{ url('arii_JOC_chart_history_order') }}?id="+id, "xml" );
    
    dhxLayout.cells("c").setText( "{{"Log" | trans }}" );
    dhxLayout.cells("c").attachURL( "{{ url('arii_JOC_order_log') }}?id="+id , true);

    HistoryGrid.attachEvent("onRowDblClicked",function(id, value){
        dhxLayout.cells("c").attachURL( "{{ url('arii_JOC_order_log') }}?id="+id , true);
});
}



function GlobalRefresh()
{
    GridRefresh();
}

function onButtonClick(menuitemId) {
    var data = mygrid.contextID.split("_");
    var rId = data[0];
    
    var cInd = data[1];
    var ids = rId.split("");
    switch (menuitemId) {
        case "start_task":
            StartJob( rId );
        break;
        case "show_info":
        break;
        case "show_history":
            if(ids[0] === "O" && ids[1] === "R" && ids[2] === "#")
            {
               var id = rId.substr(3);
               OrderHistory(id);
            }                
        break;
        case "add_order":
            if (ids[0] === "C" && ids[1] === "#")
            {
                var id = rId.substr(2);
                AddOrder(id);
            }
            if (ids[0] === "O" && ids[1] === "R" && ids[2] === "#")
            {
                var id = rId.substr(3);
                AddOrder(id);
            }
        break;
        case "start_order":
            if(ids[0] === "O" && ids[1] === "R" && ids[2] === "#")
            {
               var id = rId.substr(3);
               StartOrder(id);
            }
        break;
        case "suspend_order":
            if(ids[0] === "O" && ids[1] === "R" && ids[2] === "#")
            {
               var id = rId.substr(3);
               SuspendOrder(id);
            }
        break;
        case "resume_order":
            if(ids[0] === "O" && ids[1] === "R" && ids[2] === "#")
            {
               var id = rId.substr(3);
               ResumeOrder(id);
            }
        break;
        case "reset_order":
            if(ids[0] === "O" && ids[1] === "R" && ids[2] === "#")
            {
               var id = rId.substr(3);
               ResetOrder(id);
            }
        break;
        case "remove_setback":
            if(ids[0] === "O" && ids[1] === "R" && ids[2] === "#")
            {
               var id = rId.substr(3);
               RemoveSetback(id);
            }
        break;
        case "unstop":
            UnstopNode(rId);
            return true;
        break;
        case "stop":
            StopNode(rId);
            return true;
        break;
        case "skip":
            SkipNode(rId);
            return true;
        break;
        case "unskip":
            UnskipNode(rId);
            return true;
        break;
        case "stop_chain":
            if (ids[0] === "C" && ids[1] === "#")
            {
                var id = rId.substr(2);
                StopChain(id);
            }
            return true;
        break;
        case "unstop_chain":
            if (ids[0] === "C" && ids[1] === "#")
            {
                var id = rId.substr(2);
                UnstopChain(id);
            }
            return true;
        break;
        default:
            alert(menuitemId);    
    }
    return true;
}

function StopChain(id)
{
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command=stop_chain&id="+id,function(loader){
        dhtmlx.message({
        type: "Notice",
        expire: 10000,
        width: "500px",
        text: loader.xmlDoc.responseText
        });
        GridRefresh();
    });
}

function UnstopChain(id)
{
    alert ( "{{ url('arii_XML_Command') }}?command=unstop_chain&id="+id );
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command=unstop_chain&id="+id,function(loader){
        dhtmlx.message({
        type: "Notice",
        expire: 10000,
        width: "500px",
        text: loader.xmlDoc.responseText
        });
        GridRefresh();
    });
}

function ResetOrder(id)
{
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command=reset_order&id="+id,function(loader){
        dhtmlx.message({
        type: "Notice",
        expire: 10000,
        width: "500px",
        text: loader.xmlDoc.responseText
        });
        GridRefresh();
    });
}

function RemoveSetback(id)
{
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command=remove_setback&id="+id,function(loader){
        dhtmlx.message({
        type: "Notice",
        expire: 10000,
        width: "500px",
        text: loader.xmlDoc.responseText
        });
        GridRefresh();
    });
}

function SuspendOrder(id)
{
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command=suspend_order&id="+id,function(loader){
        dhtmlx.message({
        type: "Notice",
        expire: 10000,
        width: "500px",
        text: loader.xmlDoc.responseText
        });
        GridRefresh();
    });
}

function ResumeOrder(id)
{
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command=resume_order&id="+id,function(loader){
        dhtmlx.message({
        type: "Notice",
        expire: 10000,
        width: "500px",
        text: loader.xmlDoc.responseText
        });
        GridRefresh();
    });
}

var dhxCalendar,msg;

function AddOrder(id)
{
    var largeur = 600;
        msg = dhxWins.createWindow( "msgwin" ,  (document.getElementById("wrapper").offsetWidth-largeur)/2, 200, largeur, 500 );
        msg.setText("{{ "Add Order on JOB Chain" | trans }} "+id);
    var dhxForm = msg.attachForm();
        dhxForm.loadStruct( "{{ url('arii_JOC_form_add_order') }}?id="+id, "json", function() {
    dhtmlXCalendarObject.prototype.langData["fr"] = {
            monthesFNames: ["Janvier","Février","Маrs","Аvril","Маi","Juin","Juillet","Аoût","Septembre","Оctobre","Novembre","Décembre"],
            monthesSNames: ["Jan.","Fév.","Маrs","Аvr","Маi","Juin","Jui.","Août","Sep.","Оct.","Nov.","Déc."],
            daysFNames: ["Dimanche","Lundi","Mardi","Mercredi","Jeudi","Vendredi","Samedi"],
            daysSNames: ["Di","Lu","Ma","Me","Je","Ve","Sa"],
            weekstart: 1
    };
    dhxCalendar = dhxForm.getCalendar("start_time");
    dhxCalendar.loadUserLanguage("fr");
    dhxCalendar.showTime();
            });   
    dhxForm.attachEvent("onButtonClick", function(name, command){
        if(name === "submit"){
            msg.progressOn();
            dhtmlx.message({
                type: "Notice",
                text: "{{ "Add Order" | trans }} on <strong>"+dhxForm.getItemValue("spooler")+"//"+dhxForm.getItemValue("job_chain")+"</strong>"
            });
            msg.close();
            this.send("{{ url('arii_XML_Command') }}","GET",function(loader,response){
                dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: response
                });
                GridRefresh();
            });
        } else if(name === "cancel") {
            msg.close();
        }
    }); 
}

function StartOrder(id)
{
    var largeur = 600;
        msg = dhxWins.createWindow( "msgwin" ,  (document.getElementById("wrapper").offsetWidth-largeur)/2, 200, largeur, 500 );
        msg.setText("{{ "Start Order" | trans }} "+id);
    var dhxForm = msg.attachForm();
        dhxForm.loadStruct( "{{ url('arii_JOC_form_start_order') }}?id="+id, "json", function() {
    dhtmlXCalendarObject.prototype.langData["fr"] = {
            monthesFNames: ["Janvier","Février","Маrs","Аvril","Маi","Juin","Juillet","Аoût","Septembre","Оctobre","Novembre","Décembre"],
            monthesSNames: ["Jan.","Fév.","Маrs","Аvr","Маi","Juin","Jui.","Août","Sep.","Оct.","Nov.","Déc."],
            daysFNames: ["Dimanche","Lundi","Mardi","Mercredi","Jeudi","Vendredi","Samedi"],
            daysSNames: ["Di","Lu","Ma","Me","Je","Ve","Sa"],
            weekstart: 1
    };
    dhxCalendar = dhxForm.getCalendar("start_time");
    dhxCalendar.loadUserLanguage("fr");
    dhxCalendar.showTime();
            });            
    dhxForm.attachEvent("onButtonClick", function(name, command){
        if(name === "submit"){
            msg.progressOn();
            dhtmlx.message({
                type: "Notice",
                text: "{{ "Start Order" | trans }} <strong>"+dhxForm.getItemValue("order")+"</strong> on <strong>"+dhxForm.getItemValue("spooler")+"//"+dhxForm.getItemValue("job_chain")+"</strong>"
            });
            msg.close();
            this.send("{{ url('arii_XML_Command') }}","post",function(loader,response){
                dhtmlx.message({
                    type: "Notice",
                    expire: 10000,
                    width: "500px",
                    text: response
                });
                GridRefresh();
            });
        } else if(name === "cancel") {
            msg.close();
        }
    });        
}

function StopNode(rId)
{
    var id = rId.substr(2);
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command=stop_node&id="+id, function(loader){
        dhtmlx.message({
            type: "Notice",
            expire: 10000,
            width: "500px",
            text: loader.xmlDoc.responseText
        });
        GridRefresh();
    });
}

function SkipNode(rId)
{
    var id = rId.substr(2);
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command=skip_node&id="+id, function(loader){
        dhtmlx.message({
            type: "Notice",
            expire: 10000,
            width: "500px",
            text: loader.xmlDoc.responseText
        });
        GridRefresh();
    });
}

function UnstopNode(rId)
{
    var id = rId.substr(2);
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command=unstop_node&id="+id, function(loader){
        dhtmlx.message({
            type: "Notice",
            expire: 10000,
            width: "500px",
            text: loader.xmlDoc.responseText
        });
        GridRefresh();
    });
    
}

function UnskipNode(rId)
{
    var id = rId.substr(2);
    dhtmlxAjax.get("{{ url('arii_XML_Command') }}?command=unskip_node&id="+id,function(loader){
        dhtmlx.message({
            type: "Notice",
            expire: 10000,
            width: "500px",
            text: loader.xmlDoc.responseText
        });
        GridRefresh();
    });
}

function onShowMenu(rowId,cleInd,grid) 
{
    if(!isNaN(rowId))
    {
       /* 
       menu.setItemDisabled("show_history");
       menu.hideItem("start_order");
       menu.hideItem("add_order");
       menu.showItem("stop");
       menu.showItem("skip");
       menu.showItem("unstop");
       menu.showItem("unskip");
       menu.setItemEnabled("stop");
       menu.setItemEnabled("skip");
       menu.setItemDisabled("unstop");
       menu.setItemDisabled("unskip");
       menu.hideItem("suspend_order");
       menu.hideItem("resume_order");
       menu.hideItem("reset_order");
       menu.hideItem("remove_setback");
       */
       return false;
    } else {
       menu.setItemDisabled("show_history");
       menu.showItem("start_order");
       menu.showItem("add_order");
       menu.showItem("suspend_order");
       menu.showItem("resume_order");
       menu.showItem("reset_order");
       menu.showItem("remove_setback");
       menu.showItem("stop_chain");
       menu.showItem("unstop_chain");
       menu.hideItem("unstop");
       menu.hideItem("stop");
       menu.hideItem("skip");
       menu.hideItem("unskip");
       var ids = rowId.split("");
       var status = grid.cells(rowId,3).getValue();
       if(ids[0]==="O" && ids[1]==="R" && ids[2]==="#")
       {
           menu.hideItem("stop_chain");
           menu.hideItem("unstop_chain");
           menu.setItemEnabled("show_history");
           menu.setItemEnabled("start_order");
           menu.setItemEnabled("add_order");
           menu.setItemEnabled("reset_order");
           menu.setItemDisabled("remove_setback");
           if (status === "SUSPENDED")
           {
               menu.setItemDisabled("suspend_order");
               menu.setItemEnabled("resume_order");
           } else{
               menu.setItemDisabled("resume_order");
               menu.setItemEnabled("suspend_order");
           }
           return true;
       }
       if (ids[0]==="C" && ids[1]==="#")
       {
           menu.hideItem("start_order");
           menu.setItemEnabled("add_order");
           menu.hideItem("suspend_order");
           menu.hideItem("resume_order");
           menu.hideItem("reset_order");
           menu.hideItem("remove_setback");
           if (status === "ACTIVE")
           {
               menu.setItemEnabled("stop_chain");
               menu.setItemDisabled("unstop_chain");
           } else if (status === "STOPPED"){
               menu.setItemEnabled("unstop_chain");
               menu.setItemDisabled("stop_chain");
           }
         return true;
       }
       if (ids[0]==="S" && ids[1]==="#")
       {
           menu.hideItem("start_order");
           menu.hideItem("add_order");
           menu.showItem("stop");
           menu.showItem("skip");
           menu.showItem("unstop");
           menu.showItem("unskip");
           menu.hideItem("suspend_order");
           menu.hideItem("resume_order");
           menu.hideItem("reset_order");
           menu.hideItem("remove_setback");
           menu.hideItem("stop_chain");
           menu.hideItem("unstop_chain");
           if(status === "SKIPPED")
           {
               menu.setItemEnabled("unskip");
               menu.setItemDisabled("unstop");
               menu.setItemDisabled("stop");
               menu.setItemDisabled("skip");
           }
           if(status === "STOPPED")
           {
               menu.setItemEnabled("unstop");
               menu.setItemDisabled("unskip");
               menu.setItemDisabled("stop");
               menu.setItemDisabled("skip");
           }
           if(status === "")
           {
               menu.setItemEnabled("stop");
               menu.setItemEnabled("skip");
               menu.setItemDisabled("unstop");
               menu.setItemDisabled("unskip");
           }
           return true;
       }
    }
}

function JobLog( id ) { 
    var p = 0;
    dhxWins.forEachWindow(function() {
        p++;
    });
    if (p > 3) {
        alert("Too many windows");
        return;
    }
    var idwin = 'win'+(nbwin++);
    var win = dhxWins.createWindow( idwin, 50*nbwin, 20*nbwin, document.getElementById("wrapper").offsetWidth-20-( 5*nbwin), 220-( 20*nbwin));
    win.setText("Job log "+id);
    win.attachURL( "{{ url('arii_JOC_detail_job')  }}?id="+id , true);
}

function StartJob( id ) { 
    var msg = dhxWins.createWindow( "msgwin" , (document.getElementById("wrapper").offsetWidth-200)/2, 200,500,200 );
    msg.setText("Start job "+id);
    msg.attachURL( "{{ url('arii_JOC_start_job', {"id": 0 } )  }}"+id , true);
}
</script>
		<!--[if !IE]>end section content top<![endif]-->
		<!--[if !IE]>start section content bottom<![endif]-->
		<span class="scb"><span class="scb_left"></span><span class="scb_right"></span></span>
		<!--[if !IE]>end section content bottom<![endif]-->
		
	</div>
	<!--[if !IE]>end section content<![endif]-->
</div>
<!--[if !IE]>end section<![endif]-->
{% endblock %}
